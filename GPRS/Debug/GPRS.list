
C:\Users\Propietario\Documents\GitHub\GPRS\Debug\GPRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002984  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002a44  08002a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08002ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001dc  20000008  08002af0  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200001e4  08002af0  000201e4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ef08  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ec3  00000000  00000000  0002ef38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008b0  00000000  00000000  00030e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  000316b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000049e0  00000000  00000000  00031e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a26  00000000  00000000  00036858  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003927e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001d78  00000000  00000000  000392fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0003b074  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a2c 	.word	0x08002a2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08002a2c 	.word	0x08002a2c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <HAL_Init+0x24>)
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <HAL_Init+0x24>)
 8000238:	6812      	ldr	r2, [r2, #0]
 800023a:	2110      	movs	r1, #16
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000240:	2003      	movs	r0, #3
 8000242:	f000 f80e 	bl	8000262 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000246:	f000 f807 	bl	8000258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40022000 	.word	0x40022000

08000258 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000262:	b580      	push	{r7, lr}
 8000264:	b082      	sub	sp, #8
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800026a:	f001 fcfd 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 800026e:	0002      	movs	r2, r0
 8000270:	23fa      	movs	r3, #250	; 0xfa
 8000272:	0099      	lsls	r1, r3, #2
 8000274:	0010      	movs	r0, r2
 8000276:	f7ff ff4f 	bl	8000118 <__udivsi3>
 800027a:	0003      	movs	r3, r0
 800027c:	0018      	movs	r0, r3
 800027e:	f000 f8f1 	bl	8000464 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000282:	6879      	ldr	r1, [r7, #4]
 8000284:	2301      	movs	r3, #1
 8000286:	425b      	negs	r3, r3
 8000288:	2200      	movs	r2, #0
 800028a:	0018      	movs	r0, r3
 800028c:	f000 f8c4 	bl	8000418 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	0018      	movs	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	b002      	add	sp, #8
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  uwTick++;
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <HAL_IncTick+0x14>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	4b02      	ldr	r3, [pc, #8]	; (80002b0 <HAL_IncTick+0x14>)
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000024 	.word	0x20000024

080002b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  return uwTick;
 80002b8:	4b02      	ldr	r3, [pc, #8]	; (80002c4 <HAL_GetTick+0x10>)
 80002ba:	681b      	ldr	r3, [r3, #0]
}
 80002bc:	0018      	movs	r0, r3
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	20000024 	.word	0x20000024

080002c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	0002      	movs	r2, r0
 80002d0:	1dfb      	adds	r3, r7, #7
 80002d2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <NVIC_EnableIRQ+0x28>)
 80002d6:	1dfa      	adds	r2, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	0011      	movs	r1, r2
 80002dc:	221f      	movs	r2, #31
 80002de:	400a      	ands	r2, r1
 80002e0:	2101      	movs	r1, #1
 80002e2:	4091      	lsls	r1, r2
 80002e4:	000a      	movs	r2, r1
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b002      	add	sp, #8
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f4:	b5b0      	push	{r4, r5, r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	0002      	movs	r2, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b7f      	cmp	r3, #127	; 0x7f
 8000308:	d932      	bls.n	8000370 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	4c2f      	ldr	r4, [pc, #188]	; (80003c8 <NVIC_SetPriority+0xd4>)
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	001a      	movs	r2, r3
 8000312:	230f      	movs	r3, #15
 8000314:	4013      	ands	r3, r2
 8000316:	3b08      	subs	r3, #8
 8000318:	0899      	lsrs	r1, r3, #2
 800031a:	4a2b      	ldr	r2, [pc, #172]	; (80003c8 <NVIC_SetPriority+0xd4>)
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	0018      	movs	r0, r3
 8000322:	230f      	movs	r3, #15
 8000324:	4003      	ands	r3, r0
 8000326:	3b08      	subs	r3, #8
 8000328:	089b      	lsrs	r3, r3, #2
 800032a:	3306      	adds	r3, #6
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	18d3      	adds	r3, r2, r3
 8000330:	3304      	adds	r3, #4
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	1dfa      	adds	r2, r7, #7
 8000336:	7812      	ldrb	r2, [r2, #0]
 8000338:	0010      	movs	r0, r2
 800033a:	2203      	movs	r2, #3
 800033c:	4002      	ands	r2, r0
 800033e:	00d2      	lsls	r2, r2, #3
 8000340:	20ff      	movs	r0, #255	; 0xff
 8000342:	4090      	lsls	r0, r2
 8000344:	0002      	movs	r2, r0
 8000346:	43d2      	mvns	r2, r2
 8000348:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	019b      	lsls	r3, r3, #6
 800034e:	20ff      	movs	r0, #255	; 0xff
 8000350:	4018      	ands	r0, r3
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	001d      	movs	r5, r3
 8000358:	2303      	movs	r3, #3
 800035a:	402b      	ands	r3, r5
 800035c:	00db      	lsls	r3, r3, #3
 800035e:	4098      	lsls	r0, r3
 8000360:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000362:	431a      	orrs	r2, r3
 8000364:	1d8b      	adds	r3, r1, #6
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	18e3      	adds	r3, r4, r3
 800036a:	3304      	adds	r3, #4
 800036c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800036e:	e027      	b.n	80003c0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000370:	4c16      	ldr	r4, [pc, #88]	; (80003cc <NVIC_SetPriority+0xd8>)
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b25b      	sxtb	r3, r3
 8000378:	089b      	lsrs	r3, r3, #2
 800037a:	4914      	ldr	r1, [pc, #80]	; (80003cc <NVIC_SetPriority+0xd8>)
 800037c:	1dfa      	adds	r2, r7, #7
 800037e:	7812      	ldrb	r2, [r2, #0]
 8000380:	b252      	sxtb	r2, r2
 8000382:	0892      	lsrs	r2, r2, #2
 8000384:	32c0      	adds	r2, #192	; 0xc0
 8000386:	0092      	lsls	r2, r2, #2
 8000388:	5852      	ldr	r2, [r2, r1]
 800038a:	1df9      	adds	r1, r7, #7
 800038c:	7809      	ldrb	r1, [r1, #0]
 800038e:	0008      	movs	r0, r1
 8000390:	2103      	movs	r1, #3
 8000392:	4001      	ands	r1, r0
 8000394:	00c9      	lsls	r1, r1, #3
 8000396:	20ff      	movs	r0, #255	; 0xff
 8000398:	4088      	lsls	r0, r1
 800039a:	0001      	movs	r1, r0
 800039c:	43c9      	mvns	r1, r1
 800039e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	0192      	lsls	r2, r2, #6
 80003a4:	20ff      	movs	r0, #255	; 0xff
 80003a6:	4010      	ands	r0, r2
 80003a8:	1dfa      	adds	r2, r7, #7
 80003aa:	7812      	ldrb	r2, [r2, #0]
 80003ac:	0015      	movs	r5, r2
 80003ae:	2203      	movs	r2, #3
 80003b0:	402a      	ands	r2, r5
 80003b2:	00d2      	lsls	r2, r2, #3
 80003b4:	4090      	lsls	r0, r2
 80003b6:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003b8:	430a      	orrs	r2, r1
 80003ba:	33c0      	adds	r3, #192	; 0xc0
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	511a      	str	r2, [r3, r4]
}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bdb0      	pop	{r4, r5, r7, pc}
 80003c8:	e000ed00 	.word	0xe000ed00
 80003cc:	e000e100 	.word	0xe000e100

080003d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <SysTick_Config+0x40>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d901      	bls.n	80003e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003e2:	2301      	movs	r3, #1
 80003e4:	e010      	b.n	8000408 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <SysTick_Config+0x44>)
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	3a01      	subs	r2, #1
 80003ec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ee:	2301      	movs	r3, #1
 80003f0:	425b      	negs	r3, r3
 80003f2:	2103      	movs	r1, #3
 80003f4:	0018      	movs	r0, r3
 80003f6:	f7ff ff7d 	bl	80002f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <SysTick_Config+0x44>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <SysTick_Config+0x44>)
 8000402:	2207      	movs	r2, #7
 8000404:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000406:	2300      	movs	r3, #0
}
 8000408:	0018      	movs	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}
 8000410:	00ffffff 	.word	0x00ffffff
 8000414:	e000e010 	.word	0xe000e010

08000418 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	230f      	movs	r3, #15
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	1c02      	adds	r2, r0, #0
 8000428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800042a:	68ba      	ldr	r2, [r7, #8]
 800042c:	230f      	movs	r3, #15
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	b25b      	sxtb	r3, r3
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff ff5c 	bl	80002f4 <NVIC_SetPriority>
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bd80      	pop	{r7, pc}

08000444 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	0002      	movs	r2, r0
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b25b      	sxtb	r3, r3
 8000456:	0018      	movs	r0, r3
 8000458:	f7ff ff36 	bl	80002c8 <NVIC_EnableIRQ>
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}

08000464 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	0018      	movs	r0, r3
 8000470:	f7ff ffae 	bl	80003d0 <SysTick_Config>
 8000474:	0003      	movs	r3, r0
}
 8000476:	0018      	movs	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}

0800047e <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b084      	sub	sp, #16
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049a:	2204      	movs	r2, #4
 800049c:	409a      	lsls	r2, r3
 800049e:	0013      	movs	r3, r2
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	4013      	ands	r3, r2
 80004a4:	d024      	beq.n	80004f0 <HAL_DMA_IRQHandler+0x72>
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	2204      	movs	r2, #4
 80004aa:	4013      	ands	r3, r2
 80004ac:	d020      	beq.n	80004f0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2220      	movs	r2, #32
 80004b6:	4013      	ands	r3, r2
 80004b8:	d107      	bne.n	80004ca <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	6812      	ldr	r2, [r2, #0]
 80004c2:	6812      	ldr	r2, [r2, #0]
 80004c4:	2104      	movs	r1, #4
 80004c6:	438a      	bics	r2, r1
 80004c8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80004d2:	2104      	movs	r1, #4
 80004d4:	4091      	lsls	r1, r2
 80004d6:	000a      	movs	r2, r1
 80004d8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d100      	bne.n	80004e4 <HAL_DMA_IRQHandler+0x66>
 80004e2:	e06a      	b.n	80005ba <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	0010      	movs	r0, r2
 80004ec:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80004ee:	e064      	b.n	80005ba <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f4:	2202      	movs	r2, #2
 80004f6:	409a      	lsls	r2, r3
 80004f8:	0013      	movs	r3, r2
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	4013      	ands	r3, r2
 80004fe:	d02b      	beq.n	8000558 <HAL_DMA_IRQHandler+0xda>
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2202      	movs	r2, #2
 8000504:	4013      	ands	r3, r2
 8000506:	d027      	beq.n	8000558 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2220      	movs	r2, #32
 8000510:	4013      	ands	r3, r2
 8000512:	d10b      	bne.n	800052c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	6812      	ldr	r2, [r2, #0]
 800051c:	6812      	ldr	r2, [r2, #0]
 800051e:	210a      	movs	r1, #10
 8000520:	438a      	bics	r2, r1
 8000522:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2221      	movs	r2, #33	; 0x21
 8000528:	2101      	movs	r1, #1
 800052a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000534:	2102      	movs	r1, #2
 8000536:	4091      	lsls	r1, r2
 8000538:	000a      	movs	r2, r1
 800053a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2220      	movs	r2, #32
 8000540:	2100      	movs	r1, #0
 8000542:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000548:	2b00      	cmp	r3, #0
 800054a:	d036      	beq.n	80005ba <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	0010      	movs	r0, r2
 8000554:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000556:	e030      	b.n	80005ba <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	2208      	movs	r2, #8
 800055e:	409a      	lsls	r2, r3
 8000560:	0013      	movs	r3, r2
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	4013      	ands	r3, r2
 8000566:	d028      	beq.n	80005ba <HAL_DMA_IRQHandler+0x13c>
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	2208      	movs	r2, #8
 800056c:	4013      	ands	r3, r2
 800056e:	d024      	beq.n	80005ba <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	6812      	ldr	r2, [r2, #0]
 8000578:	6812      	ldr	r2, [r2, #0]
 800057a:	210e      	movs	r1, #14
 800057c:	438a      	bics	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000588:	2101      	movs	r1, #1
 800058a:	4091      	lsls	r1, r2
 800058c:	000a      	movs	r2, r1
 800058e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2201      	movs	r2, #1
 8000594:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2221      	movs	r2, #33	; 0x21
 800059a:	2101      	movs	r1, #1
 800059c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2220      	movs	r2, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d005      	beq.n	80005ba <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	0010      	movs	r0, r2
 80005b6:	4798      	blx	r3
    }
   }
}  
 80005b8:	e7ff      	b.n	80005ba <HAL_DMA_IRQHandler+0x13c>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b004      	add	sp, #16
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005da:	e155      	b.n	8000888 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2101      	movs	r1, #1
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	4091      	lsls	r1, r2
 80005e6:	000a      	movs	r2, r1
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d100      	bne.n	80005f4 <HAL_GPIO_Init+0x30>
 80005f2:	e146      	b.n	8000882 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d003      	beq.n	8000604 <HAL_GPIO_Init+0x40>
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	2b12      	cmp	r3, #18
 8000602:	d123      	bne.n	800064c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	08da      	lsrs	r2, r3, #3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3208      	adds	r2, #8
 800060c:	0092      	lsls	r2, r2, #2
 800060e:	58d3      	ldr	r3, [r2, r3]
 8000610:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2207      	movs	r2, #7
 8000616:	4013      	ands	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	220f      	movs	r2, #15
 800061c:	409a      	lsls	r2, r3
 800061e:	0013      	movs	r3, r2
 8000620:	43da      	mvns	r2, r3
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	4013      	ands	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	691a      	ldr	r2, [r3, #16]
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	2107      	movs	r1, #7
 8000630:	400b      	ands	r3, r1
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	409a      	lsls	r2, r3
 8000636:	0013      	movs	r3, r2
 8000638:	693a      	ldr	r2, [r7, #16]
 800063a:	4313      	orrs	r3, r2
 800063c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	08da      	lsrs	r2, r3, #3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3208      	adds	r2, #8
 8000646:	0092      	lsls	r2, r2, #2
 8000648:	6939      	ldr	r1, [r7, #16]
 800064a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	2203      	movs	r2, #3
 8000658:	409a      	lsls	r2, r3
 800065a:	0013      	movs	r3, r2
 800065c:	43da      	mvns	r2, r3
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	4013      	ands	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	2203      	movs	r2, #3
 800066a:	401a      	ands	r2, r3
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	409a      	lsls	r2, r3
 8000672:	0013      	movs	r3, r2
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	4313      	orrs	r3, r2
 8000678:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d00b      	beq.n	80006a0 <HAL_GPIO_Init+0xdc>
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d007      	beq.n	80006a0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000694:	2b11      	cmp	r3, #17
 8000696:	d003      	beq.n	80006a0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	2b12      	cmp	r3, #18
 800069e:	d130      	bne.n	8000702 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	2203      	movs	r2, #3
 80006ac:	409a      	lsls	r2, r3
 80006ae:	0013      	movs	r3, r2
 80006b0:	43da      	mvns	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	68da      	ldr	r2, [r3, #12]
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	409a      	lsls	r2, r3
 80006c2:	0013      	movs	r3, r2
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80006d6:	2201      	movs	r2, #1
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	409a      	lsls	r2, r3
 80006dc:	0013      	movs	r3, r2
 80006de:	43da      	mvns	r2, r3
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	4013      	ands	r3, r2
 80006e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	091b      	lsrs	r3, r3, #4
 80006ec:	2201      	movs	r2, #1
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
 80006f4:	0013      	movs	r3, r2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2203      	movs	r2, #3
 800070e:	409a      	lsls	r2, r3
 8000710:	0013      	movs	r3, r2
 8000712:	43da      	mvns	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	4013      	ands	r3, r2
 8000718:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	409a      	lsls	r2, r3
 8000724:	0013      	movs	r3, r2
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	4313      	orrs	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	055b      	lsls	r3, r3, #21
 800073a:	4013      	ands	r3, r2
 800073c:	d100      	bne.n	8000740 <HAL_GPIO_Init+0x17c>
 800073e:	e0a0      	b.n	8000882 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000740:	4b57      	ldr	r3, [pc, #348]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 8000742:	4a57      	ldr	r2, [pc, #348]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 8000744:	6992      	ldr	r2, [r2, #24]
 8000746:	2101      	movs	r1, #1
 8000748:	430a      	orrs	r2, r1
 800074a:	619a      	str	r2, [r3, #24]
 800074c:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <HAL_GPIO_Init+0x2dc>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	2201      	movs	r2, #1
 8000752:	4013      	ands	r3, r2
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000758:	4a52      	ldr	r2, [pc, #328]	; (80008a4 <HAL_GPIO_Init+0x2e0>)
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	089b      	lsrs	r3, r3, #2
 800075e:	3302      	adds	r3, #2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	589b      	ldr	r3, [r3, r2]
 8000764:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	2203      	movs	r2, #3
 800076a:	4013      	ands	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	220f      	movs	r2, #15
 8000770:	409a      	lsls	r2, r3
 8000772:	0013      	movs	r3, r2
 8000774:	43da      	mvns	r2, r3
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	4013      	ands	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	429a      	cmp	r2, r3
 8000784:	d019      	beq.n	80007ba <HAL_GPIO_Init+0x1f6>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a47      	ldr	r2, [pc, #284]	; (80008a8 <HAL_GPIO_Init+0x2e4>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d013      	beq.n	80007b6 <HAL_GPIO_Init+0x1f2>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a46      	ldr	r2, [pc, #280]	; (80008ac <HAL_GPIO_Init+0x2e8>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d00d      	beq.n	80007b2 <HAL_GPIO_Init+0x1ee>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a45      	ldr	r2, [pc, #276]	; (80008b0 <HAL_GPIO_Init+0x2ec>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d007      	beq.n	80007ae <HAL_GPIO_Init+0x1ea>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a44      	ldr	r2, [pc, #272]	; (80008b4 <HAL_GPIO_Init+0x2f0>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_GPIO_Init+0x1e6>
 80007a6:	2304      	movs	r3, #4
 80007a8:	e008      	b.n	80007bc <HAL_GPIO_Init+0x1f8>
 80007aa:	2305      	movs	r3, #5
 80007ac:	e006      	b.n	80007bc <HAL_GPIO_Init+0x1f8>
 80007ae:	2303      	movs	r3, #3
 80007b0:	e004      	b.n	80007bc <HAL_GPIO_Init+0x1f8>
 80007b2:	2302      	movs	r3, #2
 80007b4:	e002      	b.n	80007bc <HAL_GPIO_Init+0x1f8>
 80007b6:	2301      	movs	r3, #1
 80007b8:	e000      	b.n	80007bc <HAL_GPIO_Init+0x1f8>
 80007ba:	2300      	movs	r3, #0
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	2103      	movs	r1, #3
 80007c0:	400a      	ands	r2, r1
 80007c2:	0092      	lsls	r2, r2, #2
 80007c4:	4093      	lsls	r3, r2
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80007cc:	4935      	ldr	r1, [pc, #212]	; (80008a4 <HAL_GPIO_Init+0x2e0>)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	089b      	lsrs	r3, r3, #2
 80007d2:	3302      	adds	r3, #2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <HAL_GPIO_Init+0x2f4>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	43da      	mvns	r2, r3
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	4013      	ands	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	025b      	lsls	r3, r3, #9
 80007f2:	4013      	ands	r3, r2
 80007f4:	d003      	beq.n	80007fe <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <HAL_GPIO_Init+0x2f4>)
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <HAL_GPIO_Init+0x2f4>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	43da      	mvns	r2, r3
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	4013      	ands	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	029b      	lsls	r3, r3, #10
 800081c:	4013      	ands	r3, r2
 800081e:	d003      	beq.n	8000828 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4313      	orrs	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <HAL_GPIO_Init+0x2f4>)
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <HAL_GPIO_Init+0x2f4>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	43da      	mvns	r2, r3
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	4013      	ands	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	035b      	lsls	r3, r3, #13
 8000846:	4013      	ands	r3, r2
 8000848:	d003      	beq.n	8000852 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_GPIO_Init+0x2f4>)
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_GPIO_Init+0x2f4>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	43da      	mvns	r2, r3
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	039b      	lsls	r3, r3, #14
 8000870:	4013      	ands	r3, r2
 8000872:	d003      	beq.n	800087c <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <HAL_GPIO_Init+0x2f4>)
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	3301      	adds	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	40da      	lsrs	r2, r3
 8000890:	1e13      	subs	r3, r2, #0
 8000892:	d000      	beq.n	8000896 <HAL_GPIO_Init+0x2d2>
 8000894:	e6a2      	b.n	80005dc <HAL_GPIO_Init+0x18>
  } 
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b006      	add	sp, #24
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010000 	.word	0x40010000
 80008a8:	48000400 	.word	0x48000400
 80008ac:	48000800 	.word	0x48000800
 80008b0:	48000c00 	.word	0x48000c00
 80008b4:	48001000 	.word	0x48001000
 80008b8:	40010400 	.word	0x40010400

080008bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e081      	b.n	80009d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2241      	movs	r2, #65	; 0x41
 80008d2:	5c9b      	ldrb	r3, [r3, r2]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d107      	bne.n	80008ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2240      	movs	r2, #64	; 0x40
 80008de:	2100      	movs	r1, #0
 80008e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 f87f 	bl	80009e8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2241      	movs	r2, #65	; 0x41
 80008ee:	2124      	movs	r1, #36	; 0x24
 80008f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6812      	ldr	r2, [r2, #0]
 80008fa:	6812      	ldr	r2, [r2, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	438a      	bics	r2, r1
 8000900:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	6852      	ldr	r2, [r2, #4]
 800090a:	4934      	ldr	r1, [pc, #208]	; (80009dc <HAL_I2C_Init+0x120>)
 800090c:	400a      	ands	r2, r1
 800090e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	6892      	ldr	r2, [r2, #8]
 800091a:	4931      	ldr	r1, [pc, #196]	; (80009e0 <HAL_I2C_Init+0x124>)
 800091c:	400a      	ands	r2, r1
 800091e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d108      	bne.n	800093a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	6892      	ldr	r2, [r2, #8]
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	0209      	lsls	r1, r1, #8
 8000934:	430a      	orrs	r2, r1
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	e007      	b.n	800094a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	6892      	ldr	r2, [r2, #8]
 8000942:	2184      	movs	r1, #132	; 0x84
 8000944:	0209      	lsls	r1, r1, #8
 8000946:	430a      	orrs	r2, r1
 8000948:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d104      	bne.n	800095c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	6812      	ldr	r2, [r2, #0]
 8000964:	6852      	ldr	r2, [r2, #4]
 8000966:	491f      	ldr	r1, [pc, #124]	; (80009e4 <HAL_I2C_Init+0x128>)
 8000968:	430a      	orrs	r2, r1
 800096a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	6812      	ldr	r2, [r2, #0]
 8000974:	68d2      	ldr	r2, [r2, #12]
 8000976:	491a      	ldr	r1, [pc, #104]	; (80009e0 <HAL_I2C_Init+0x124>)
 8000978:	400a      	ands	r2, r1
 800097a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	6911      	ldr	r1, [r2, #16]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	6952      	ldr	r2, [r2, #20]
 8000988:	4311      	orrs	r1, r2
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	6992      	ldr	r2, [r2, #24]
 800098e:	0212      	lsls	r2, r2, #8
 8000990:	430a      	orrs	r2, r1
 8000992:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	69d1      	ldr	r1, [r2, #28]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	6a12      	ldr	r2, [r2, #32]
 80009a0:	430a      	orrs	r2, r1
 80009a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	6812      	ldr	r2, [r2, #0]
 80009ae:	2101      	movs	r1, #1
 80009b0:	430a      	orrs	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2241      	movs	r2, #65	; 0x41
 80009be:	2120      	movs	r1, #32
 80009c0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2242      	movs	r2, #66	; 0x42
 80009cc:	2100      	movs	r1, #0
 80009ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	f0ffffff 	.word	0xf0ffffff
 80009e0:	ffff7fff 	.word	0xffff7fff
 80009e4:	02008000 	.word	0x02008000

080009e8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	0008      	movs	r0, r1
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	0019      	movs	r1, r3
 8000a06:	230a      	movs	r3, #10
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	1c02      	adds	r2, r0, #0
 8000a0c:	801a      	strh	r2, [r3, #0]
 8000a0e:	2308      	movs	r3, #8
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	1c0a      	adds	r2, r1, #0
 8000a14:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2241      	movs	r2, #65	; 0x41
 8000a1e:	5c9b      	ldrb	r3, [r3, r2]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b20      	cmp	r3, #32
 8000a24:	d000      	beq.n	8000a28 <HAL_I2C_Master_Transmit+0x30>
 8000a26:	e0f3      	b.n	8000c10 <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2240      	movs	r2, #64	; 0x40
 8000a2c:	5c9b      	ldrb	r3, [r3, r2]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d101      	bne.n	8000a36 <HAL_I2C_Master_Transmit+0x3e>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e0ed      	b.n	8000c12 <HAL_I2C_Master_Transmit+0x21a>
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2240      	movs	r2, #64	; 0x40
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000a3e:	f7ff fc39 	bl	80002b4 <HAL_GetTick>
 8000a42:	0003      	movs	r3, r0
 8000a44:	617b      	str	r3, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	0219      	lsls	r1, r3, #8
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2319      	movs	r3, #25
 8000a52:	2201      	movs	r2, #1
 8000a54:	f000 fa30 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e0d8      	b.n	8000c12 <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2241      	movs	r2, #65	; 0x41
 8000a64:	2121      	movs	r1, #33	; 0x21
 8000a66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2242      	movs	r2, #66	; 0x42
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2200      	movs	r2, #0
 8000a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2208      	movs	r2, #8
 8000a80:	18ba      	adds	r2, r7, r2
 8000a82:	8812      	ldrh	r2, [r2, #0]
 8000a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	2bff      	cmp	r3, #255	; 0xff
 8000a94:	d912      	bls.n	8000abc <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	045c      	lsls	r4, r3, #17
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	8819      	ldrh	r1, [r3, #0]
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	0023      	movs	r3, r4
 8000ab6:	f000 fb6f 	bl	8001198 <I2C_TransferConfig>
 8000aba:	e07a      	b.n	8000bb2 <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	049c      	lsls	r4, r3, #18
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	8819      	ldrh	r1, [r3, #0]
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	019b      	lsls	r3, r3, #6
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	0023      	movs	r3, r4
 8000ae0:	f000 fb5a 	bl	8001198 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8000ae4:	e065      	b.n	8000bb2 <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fa1c 	bl	8000f2a <I2C_WaitOnTXISFlagUntilTimeout>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d007      	beq.n	8000b06 <HAL_I2C_Master_Transmit+0x10e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d101      	bne.n	8000b02 <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e087      	b.n	8000c12 <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000b02:	2303      	movs	r3, #3
 8000b04:	e085      	b.n	8000c12 <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b0e:	1c50      	adds	r0, r2, #1
 8000b10:	68f9      	ldr	r1, [r7, #12]
 8000b12:	6248      	str	r0, [r1, #36]	; 0x24
 8000b14:	7812      	ldrb	r2, [r2, #0]
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d13b      	bne.n	8000bb2 <HAL_I2C_Master_Transmit+0x1ba>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d036      	beq.n	8000bb2 <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	f000 f9b1 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e059      	b.n	8000c12 <HAL_I2C_Master_Transmit+0x21a>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	2bff      	cmp	r3, #255	; 0xff
 8000b66:	d911      	bls.n	8000b8c <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	045c      	lsls	r4, r3, #17
 8000b78:	230a      	movs	r3, #10
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	8819      	ldrh	r1, [r3, #0]
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	2300      	movs	r3, #0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	0023      	movs	r3, r4
 8000b86:	f000 fb07 	bl	8001198 <I2C_TransferConfig>
 8000b8a:	e012      	b.n	8000bb2 <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	049c      	lsls	r4, r3, #18
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	8819      	ldrh	r1, [r3, #0]
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	0023      	movs	r3, r4
 8000bae:	f000 faf3 	bl	8001198 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d194      	bne.n	8000ae6 <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 f9f0 	bl	8000fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d007      	beq.n	8000bdc <HAL_I2C_Master_Transmit+0x1e4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d101      	bne.n	8000bd8 <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e01c      	b.n	8000c12 <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e01a      	b.n	8000c12 <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2220      	movs	r2, #32
 8000be2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	6812      	ldr	r2, [r2, #0]
 8000bec:	6852      	ldr	r2, [r2, #4]
 8000bee:	490b      	ldr	r1, [pc, #44]	; (8000c1c <HAL_I2C_Master_Transmit+0x224>)
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2241      	movs	r2, #65	; 0x41
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2242      	movs	r2, #66	; 0x42
 8000c00:	2100      	movs	r1, #0
 8000c02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2240      	movs	r2, #64	; 0x40
 8000c08:	2100      	movs	r1, #0
 8000c0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e000      	b.n	8000c12 <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8000c10:	2302      	movs	r3, #2
  }
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b007      	add	sp, #28
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	fe00e800 	.word	0xfe00e800

08000c20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	0008      	movs	r0, r1
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	230a      	movs	r3, #10
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	1c02      	adds	r2, r0, #0
 8000c34:	801a      	strh	r2, [r3, #0]
 8000c36:	2308      	movs	r3, #8
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	1c0a      	adds	r2, r1, #0
 8000c3c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2241      	movs	r2, #65	; 0x41
 8000c46:	5c9b      	ldrb	r3, [r3, r2]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b20      	cmp	r3, #32
 8000c4c:	d000      	beq.n	8000c50 <HAL_I2C_Master_Receive+0x30>
 8000c4e:	e0f4      	b.n	8000e3a <HAL_I2C_Master_Receive+0x21a>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2240      	movs	r2, #64	; 0x40
 8000c54:	5c9b      	ldrb	r3, [r3, r2]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d101      	bne.n	8000c5e <HAL_I2C_Master_Receive+0x3e>
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e0ee      	b.n	8000e3c <HAL_I2C_Master_Receive+0x21c>
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2240      	movs	r2, #64	; 0x40
 8000c62:	2101      	movs	r1, #1
 8000c64:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c66:	f7ff fb25 	bl	80002b4 <HAL_GetTick>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	617b      	str	r3, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	0219      	lsls	r1, r3, #8
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2319      	movs	r3, #25
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f000 f91c 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_I2C_Master_Receive+0x68>
    {
      return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e0d9      	b.n	8000e3c <HAL_I2C_Master_Receive+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2241      	movs	r2, #65	; 0x41
 8000c8c:	2122      	movs	r1, #34	; 0x22
 8000c8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2242      	movs	r2, #66	; 0x42
 8000c94:	2110      	movs	r1, #16
 8000c96:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	18ba      	adds	r2, r7, r2
 8000caa:	8812      	ldrh	r2, [r2, #0]
 8000cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	2bff      	cmp	r3, #255	; 0xff
 8000cbc:	d912      	bls.n	8000ce4 <HAL_I2C_Master_Receive+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	22ff      	movs	r2, #255	; 0xff
 8000cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	045c      	lsls	r4, r3, #17
 8000cce:	230a      	movs	r3, #10
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	8819      	ldrh	r1, [r3, #0]
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	2390      	movs	r3, #144	; 0x90
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	0023      	movs	r3, r4
 8000cde:	f000 fa5b 	bl	8001198 <I2C_TransferConfig>
 8000ce2:	e07b      	b.n	8000ddc <HAL_I2C_Master_Receive+0x1bc>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	049c      	lsls	r4, r3, #18
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	8819      	ldrh	r1, [r3, #0]
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	2390      	movs	r3, #144	; 0x90
 8000d02:	019b      	lsls	r3, r3, #6
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	0023      	movs	r3, r4
 8000d08:	f000 fa46 	bl	8001198 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8000d0c:	e066      	b.n	8000ddc <HAL_I2C_Master_Receive+0x1bc>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 f983 	bl	8001020 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d007      	beq.n	8000d2e <HAL_I2C_Master_Receive+0x10e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d101      	bne.n	8000d2a <HAL_I2C_Master_Receive+0x10a>
        {
          return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e088      	b.n	8000e3c <HAL_I2C_Master_Receive+0x21c>
        }
        else
        {
          return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e086      	b.n	8000e3c <HAL_I2C_Master_Receive+0x21c>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d32:	1c59      	adds	r1, r3, #1
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	6251      	str	r1, [r2, #36]	; 0x24
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	6812      	ldr	r2, [r2, #0]
 8000d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d46:	3b01      	subs	r3, #1
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	3b01      	subs	r3, #1
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d13b      	bne.n	8000ddc <HAL_I2C_Master_Receive+0x1bc>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d036      	beq.n	8000ddc <HAL_I2C_Master_Receive+0x1bc>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	0013      	movs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	f000 f89c 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_I2C_Master_Receive+0x168>
        {
          return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e059      	b.n	8000e3c <HAL_I2C_Master_Receive+0x21c>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	2bff      	cmp	r3, #255	; 0xff
 8000d90:	d911      	bls.n	8000db6 <HAL_I2C_Master_Receive+0x196>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	22ff      	movs	r2, #255	; 0xff
 8000d96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	045c      	lsls	r4, r3, #17
 8000da2:	230a      	movs	r3, #10
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	8819      	ldrh	r1, [r3, #0]
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	2300      	movs	r3, #0
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	0023      	movs	r3, r4
 8000db0:	f000 f9f2 	bl	8001198 <I2C_TransferConfig>
 8000db4:	e012      	b.n	8000ddc <HAL_I2C_Master_Receive+0x1bc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	049c      	lsls	r4, r3, #18
 8000dca:	230a      	movs	r3, #10
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	8819      	ldrh	r1, [r3, #0]
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	0023      	movs	r3, r4
 8000dd8:	f000 f9de 	bl	8001198 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d193      	bne.n	8000d0e <HAL_I2C_Master_Receive+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 f8db 	bl	8000fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d007      	beq.n	8000e06 <HAL_I2C_Master_Receive+0x1e6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	d101      	bne.n	8000e02 <HAL_I2C_Master_Receive+0x1e2>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e01c      	b.n	8000e3c <HAL_I2C_Master_Receive+0x21c>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e01a      	b.n	8000e3c <HAL_I2C_Master_Receive+0x21c>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	6852      	ldr	r2, [r2, #4]
 8000e18:	490a      	ldr	r1, [pc, #40]	; (8000e44 <HAL_I2C_Master_Receive+0x224>)
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2241      	movs	r2, #65	; 0x41
 8000e22:	2120      	movs	r1, #32
 8000e24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2242      	movs	r2, #66	; 0x42
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2240      	movs	r2, #64	; 0x40
 8000e32:	2100      	movs	r1, #0
 8000e34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_I2C_Master_Receive+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8000e3a:	2302      	movs	r3, #2
  }
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b007      	add	sp, #28
 8000e42:	bd90      	pop	{r4, r7, pc}
 8000e44:	fe00e800 	.word	0xfe00e800

08000e48 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2241      	movs	r2, #65	; 0x41
 8000e54:	5c9b      	ldrb	r3, [r3, r2]
 8000e56:	b2db      	uxtb	r3, r3
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	2202      	movs	r2, #2
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d103      	bne.n	8000e92 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d007      	beq.n	8000eb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	6992      	ldr	r2, [r2, #24]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	430a      	orrs	r2, r1
 8000eae:	619a      	str	r2, [r3, #24]
  }
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	701a      	strb	r2, [r3, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ec8:	e01b      	b.n	8000f02 <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	d018      	beq.n	8000f02 <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000ed6:	f7ff f9ed 	bl	80002b4 <HAL_GetTick>
 8000eda:	0002      	movs	r2, r0
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	1ad2      	subs	r2, r2, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d90d      	bls.n	8000f02 <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2241      	movs	r2, #65	; 0x41
 8000eea:	2120      	movs	r1, #32
 8000eec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2242      	movs	r2, #66	; 0x42
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	2100      	movs	r1, #0
 8000efc:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e00f      	b.n	8000f22 <I2C_WaitOnFlagUntilTimeout+0x6a>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	425a      	negs	r2, r3
 8000f12:	4153      	adcs	r3, r2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	001a      	movs	r2, r3
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d0d4      	beq.n	8000eca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f36:	e02b      	b.n	8000f90 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 f8cc 	bl	80010dc <I2C_IsAcknowledgeFailed>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d001      	beq.n	8000f4c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e029      	b.n	8000fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	d01e      	beq.n	8000f90 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d007      	beq.n	8000f68 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000f58:	f7ff f9ac 	bl	80002b4 <HAL_GetTick>
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	1ad2      	subs	r2, r2, r3
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d913      	bls.n	8000f90 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2241      	movs	r2, #65	; 0x41
 8000f78:	2120      	movs	r1, #32
 8000f7a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2242      	movs	r2, #66	; 0x42
 8000f80:	2100      	movs	r1, #0
 8000f82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2240      	movs	r2, #64	; 0x40
 8000f88:	2100      	movs	r1, #0
 8000f8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e007      	b.n	8000fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	2202      	movs	r2, #2
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d1cc      	bne.n	8000f38 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fb4:	e028      	b.n	8001008 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f000 f88d 	bl	80010dc <I2C_IsAcknowledgeFailed>
 8000fc2:	1e03      	subs	r3, r0, #0
 8000fc4:	d001      	beq.n	8000fca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e026      	b.n	8001018 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d007      	beq.n	8000fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000fd0:	f7ff f970 	bl	80002b4 <HAL_GetTick>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1ad2      	subs	r2, r2, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d913      	bls.n	8001008 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2241      	movs	r2, #65	; 0x41
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2242      	movs	r2, #66	; 0x42
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	2100      	movs	r1, #0
 8001002:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e007      	b.n	8001018 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	2220      	movs	r2, #32
 8001010:	4013      	ands	r3, r2
 8001012:	2b20      	cmp	r3, #32
 8001014:	d1cf      	bne.n	8000fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b004      	add	sp, #16
 800101e:	bd80      	pop	{r7, pc}

08001020 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800102c:	e048      	b.n	80010c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	0018      	movs	r0, r3
 8001036:	f000 f851 	bl	80010dc <I2C_IsAcknowledgeFailed>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d001      	beq.n	8001042 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e046      	b.n	80010d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	2220      	movs	r2, #32
 800104a:	4013      	ands	r3, r2
 800104c:	2b20      	cmp	r3, #32
 800104e:	d11c      	bne.n	800108a <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2220      	movs	r2, #32
 8001056:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	6852      	ldr	r2, [r2, #4]
 8001062:	491d      	ldr	r1, [pc, #116]	; (80010d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8001064:	400a      	ands	r2, r1
 8001066:	605a      	str	r2, [r3, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2241      	movs	r2, #65	; 0x41
 8001072:	2120      	movs	r1, #32
 8001074:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2242      	movs	r2, #66	; 0x42
 800107a:	2100      	movs	r1, #0
 800107c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2240      	movs	r2, #64	; 0x40
 8001082:	2100      	movs	r1, #0
 8001084:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e022      	b.n	80010d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8001090:	f7ff f910 	bl	80002b4 <HAL_GetTick>
 8001094:	0002      	movs	r2, r0
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1ad2      	subs	r2, r2, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	429a      	cmp	r2, r3
 800109e:	d90f      	bls.n	80010c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	2220      	movs	r2, #32
 80010a6:	431a      	orrs	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2241      	movs	r2, #65	; 0x41
 80010b0:	2120      	movs	r1, #32
 80010b2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2240      	movs	r2, #64	; 0x40
 80010b8:	2100      	movs	r1, #0
 80010ba:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e007      	b.n	80010d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	2204      	movs	r2, #4
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d1af      	bne.n	800102e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b004      	add	sp, #16
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	fe00e800 	.word	0xfe00e800

080010dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	2210      	movs	r2, #16
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d148      	bne.n	8001188 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010f6:	e01b      	b.n	8001130 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	3301      	adds	r3, #1
 80010fc:	d018      	beq.n	8001130 <I2C_IsAcknowledgeFailed+0x54>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <I2C_IsAcknowledgeFailed+0x38>
 8001104:	f7ff f8d6 	bl	80002b4 <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	1ad2      	subs	r2, r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	429a      	cmp	r2, r3
 8001112:	d90d      	bls.n	8001130 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2241      	movs	r2, #65	; 0x41
 8001118:	2120      	movs	r1, #32
 800111a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2242      	movs	r2, #66	; 0x42
 8001120:	2100      	movs	r1, #0
 8001122:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2240      	movs	r2, #64	; 0x40
 8001128:	2100      	movs	r1, #0
 800112a:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e02c      	b.n	800118a <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	2220      	movs	r2, #32
 8001138:	4013      	ands	r3, r2
 800113a:	2b20      	cmp	r3, #32
 800113c:	d1dc      	bne.n	80010f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2210      	movs	r2, #16
 8001144:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2220      	movs	r2, #32
 800114c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fe8f 	bl	8000e74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	6852      	ldr	r2, [r2, #4]
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <I2C_IsAcknowledgeFailed+0xb8>)
 8001162:	400a      	ands	r2, r1
 8001164:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2204      	movs	r2, #4
 800116a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2241      	movs	r2, #65	; 0x41
 8001170:	2120      	movs	r1, #32
 8001172:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2242      	movs	r2, #66	; 0x42
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2240      	movs	r2, #64	; 0x40
 8001180:	2100      	movs	r1, #0
 8001182:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b004      	add	sp, #16
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	fe00e800 	.word	0xfe00e800

08001198 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	0008      	movs	r0, r1
 80011a2:	0011      	movs	r1, r2
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	230a      	movs	r3, #10
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	1c02      	adds	r2, r0, #0
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	2309      	movs	r3, #9
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	1c0a      	adds	r2, r1, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <I2C_TransferConfig+0x6c>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80011ca:	230a      	movs	r3, #10
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	059b      	lsls	r3, r3, #22
 80011d2:	0d9a      	lsrs	r2, r3, #22
 80011d4:	2309      	movs	r3, #9
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	0419      	lsls	r1, r3, #16
 80011dc:	23ff      	movs	r3, #255	; 0xff
 80011de:	041b      	lsls	r3, r3, #16
 80011e0:	400b      	ands	r3, r1
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	605a      	str	r2, [r3, #4]
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b006      	add	sp, #24
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	fc009800 	.word	0xfc009800

08001208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2241      	movs	r2, #65	; 0x41
 8001216:	5c9b      	ldrb	r3, [r3, r2]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b20      	cmp	r3, #32
 800121c:	d138      	bne.n	8001290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2240      	movs	r2, #64	; 0x40
 8001222:	5c9b      	ldrb	r3, [r3, r2]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001228:	2302      	movs	r3, #2
 800122a:	e032      	b.n	8001292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	2101      	movs	r1, #1
 8001232:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2241      	movs	r2, #65	; 0x41
 8001238:	2124      	movs	r1, #36	; 0x24
 800123a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	2101      	movs	r1, #1
 8001248:	438a      	bics	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	4911      	ldr	r1, [pc, #68]	; (800129c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001258:	400a      	ands	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	6811      	ldr	r1, [r2, #0]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2241      	movs	r2, #65	; 0x41
 8001280:	2120      	movs	r1, #32
 8001282:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2240      	movs	r2, #64	; 0x40
 8001288:	2100      	movs	r1, #0
 800128a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	e000      	b.n	8001292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001290:	2302      	movs	r3, #2
  }
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	ffffefff 	.word	0xffffefff

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4013      	ands	r3, r2
 80012b4:	d100      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18>
 80012b6:	e08d      	b.n	80013d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012b8:	4bc5      	ldr	r3, [pc, #788]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	220c      	movs	r2, #12
 80012be:	4013      	ands	r3, r2
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d00e      	beq.n	80012e2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c4:	4bc2      	ldr	r3, [pc, #776]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	220c      	movs	r2, #12
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d116      	bne.n	80012fe <HAL_RCC_OscConfig+0x5e>
 80012d0:	4bbf      	ldr	r3, [pc, #764]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	23c0      	movs	r3, #192	; 0xc0
 80012d6:	025b      	lsls	r3, r3, #9
 80012d8:	401a      	ands	r2, r3
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	025b      	lsls	r3, r3, #9
 80012de:	429a      	cmp	r2, r3
 80012e0:	d10d      	bne.n	80012fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e2:	4bbb      	ldr	r3, [pc, #748]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	029b      	lsls	r3, r3, #10
 80012ea:	4013      	ands	r3, r2
 80012ec:	d100      	bne.n	80012f0 <HAL_RCC_OscConfig+0x50>
 80012ee:	e070      	b.n	80013d2 <HAL_RCC_OscConfig+0x132>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d000      	beq.n	80012fa <HAL_RCC_OscConfig+0x5a>
 80012f8:	e06b      	b.n	80013d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e327      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_RCC_OscConfig+0x76>
 8001306:	4bb2      	ldr	r3, [pc, #712]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001308:	4ab1      	ldr	r2, [pc, #708]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0249      	lsls	r1, r1, #9
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e02f      	b.n	8001376 <HAL_RCC_OscConfig+0xd6>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4bac      	ldr	r3, [pc, #688]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001320:	4aab      	ldr	r2, [pc, #684]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	49ab      	ldr	r1, [pc, #684]	; (80015d4 <HAL_RCC_OscConfig+0x334>)
 8001326:	400a      	ands	r2, r1
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	4ba9      	ldr	r3, [pc, #676]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800132c:	4aa8      	ldr	r2, [pc, #672]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	49a9      	ldr	r1, [pc, #676]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001332:	400a      	ands	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e01e      	b.n	8001376 <HAL_RCC_OscConfig+0xd6>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b05      	cmp	r3, #5
 800133e:	d10e      	bne.n	800135e <HAL_RCC_OscConfig+0xbe>
 8001340:	4ba3      	ldr	r3, [pc, #652]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001342:	4aa3      	ldr	r2, [pc, #652]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	02c9      	lsls	r1, r1, #11
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	4ba0      	ldr	r3, [pc, #640]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001350:	4a9f      	ldr	r2, [pc, #636]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0249      	lsls	r1, r1, #9
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e00b      	b.n	8001376 <HAL_RCC_OscConfig+0xd6>
 800135e:	4b9c      	ldr	r3, [pc, #624]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001360:	4a9b      	ldr	r2, [pc, #620]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	499b      	ldr	r1, [pc, #620]	; (80015d4 <HAL_RCC_OscConfig+0x334>)
 8001366:	400a      	ands	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	4b99      	ldr	r3, [pc, #612]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800136c:	4a98      	ldr	r2, [pc, #608]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	4999      	ldr	r1, [pc, #612]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d014      	beq.n	80013a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7fe ff99 	bl	80002b4 <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7fe ff94 	bl	80002b4 <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e2d9      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b8d      	ldr	r3, [pc, #564]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	029b      	lsls	r3, r3, #10
 80013a2:	4013      	ands	r3, r2
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xe8>
 80013a6:	e015      	b.n	80013d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7fe ff84 	bl	80002b4 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b2:	f7fe ff7f 	bl	80002b4 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b64      	cmp	r3, #100	; 0x64
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e2c4      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c4:	4b82      	ldr	r3, [pc, #520]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	029b      	lsls	r3, r3, #10
 80013cc:	4013      	ands	r3, r2
 80013ce:	d1f0      	bne.n	80013b2 <HAL_RCC_OscConfig+0x112>
 80013d0:	e000      	b.n	80013d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2202      	movs	r2, #2
 80013da:	4013      	ands	r3, r2
 80013dc:	d100      	bne.n	80013e0 <HAL_RCC_OscConfig+0x140>
 80013de:	e06c      	b.n	80014ba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013e0:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	220c      	movs	r2, #12
 80013e6:	4013      	ands	r3, r2
 80013e8:	d00e      	beq.n	8001408 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013ea:	4b79      	ldr	r3, [pc, #484]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	220c      	movs	r2, #12
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11f      	bne.n	8001436 <HAL_RCC_OscConfig+0x196>
 80013f6:	4b76      	ldr	r3, [pc, #472]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	23c0      	movs	r3, #192	; 0xc0
 80013fc:	025b      	lsls	r3, r3, #9
 80013fe:	401a      	ands	r2, r3
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	429a      	cmp	r2, r3
 8001406:	d116      	bne.n	8001436 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001408:	4b71      	ldr	r3, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2202      	movs	r2, #2
 800140e:	4013      	ands	r3, r2
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x17e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e297      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4a6c      	ldr	r2, [pc, #432]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001420:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	21f8      	movs	r1, #248	; 0xf8
 8001426:	438b      	bics	r3, r1
 8001428:	0019      	movs	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	430b      	orrs	r3, r1
 8001432:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001434:	e041      	b.n	80014ba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d024      	beq.n	8001488 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143e:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001440:	4a63      	ldr	r2, [pc, #396]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7fe ff33 	bl	80002b4 <HAL_GetTick>
 800144e:	0003      	movs	r3, r0
 8001450:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001454:	f7fe ff2e 	bl	80002b4 <HAL_GetTick>
 8001458:	0002      	movs	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e273      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001466:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d0f1      	beq.n	8001454 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4a57      	ldr	r2, [pc, #348]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001472:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	21f8      	movs	r1, #248	; 0xf8
 8001478:	438b      	bics	r3, r1
 800147a:	0019      	movs	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	430b      	orrs	r3, r1
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e018      	b.n	80014ba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001488:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800148a:	4a51      	ldr	r2, [pc, #324]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	2101      	movs	r1, #1
 8001490:	438a      	bics	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7fe ff0e 	bl	80002b4 <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149e:	f7fe ff09 	bl	80002b4 <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e24e      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b0:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	d1f1      	bne.n	800149e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2208      	movs	r2, #8
 80014c0:	4013      	ands	r3, r2
 80014c2:	d036      	beq.n	8001532 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d019      	beq.n	8001500 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014cc:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80014ce:	4a40      	ldr	r2, [pc, #256]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80014d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014d2:	2101      	movs	r1, #1
 80014d4:	430a      	orrs	r2, r1
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7fe feec 	bl	80002b4 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e2:	f7fe fee7 	bl	80002b4 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e22c      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	2202      	movs	r2, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	d0f1      	beq.n	80014e2 <HAL_RCC_OscConfig+0x242>
 80014fe:	e018      	b.n	8001532 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001500:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001502:	4a33      	ldr	r2, [pc, #204]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001506:	2101      	movs	r1, #1
 8001508:	438a      	bics	r2, r1
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150c:	f7fe fed2 	bl	80002b4 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001516:	f7fe fecd 	bl	80002b4 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e212      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	2202      	movs	r2, #2
 800152e:	4013      	ands	r3, r2
 8001530:	d1f1      	bne.n	8001516 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2204      	movs	r2, #4
 8001538:	4013      	ands	r3, r2
 800153a:	d100      	bne.n	800153e <HAL_RCC_OscConfig+0x29e>
 800153c:	e0b6      	b.n	80016ac <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153e:	2317      	movs	r3, #23
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001546:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	055b      	lsls	r3, r3, #21
 800154e:	4013      	ands	r3, r2
 8001550:	d111      	bne.n	8001576 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001556:	69d2      	ldr	r2, [r2, #28]
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0549      	lsls	r1, r1, #21
 800155c:	430a      	orrs	r2, r1
 800155e:	61da      	str	r2, [r3, #28]
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 8001562:	69da      	ldr	r2, [r3, #28]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800156e:	2317      	movs	r3, #23
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4013      	ands	r3, r2
 8001580:	d11a      	bne.n	80015b8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001584:	4a15      	ldr	r2, [pc, #84]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0049      	lsls	r1, r1, #1
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001590:	f7fe fe90 	bl	80002b4 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7fe fe8b 	bl	80002b4 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b64      	cmp	r3, #100	; 0x64
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1d0      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d10f      	bne.n	80015e0 <HAL_RCC_OscConfig+0x340>
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80015c2:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 80015c4:	6a12      	ldr	r2, [r2, #32]
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	621a      	str	r2, [r3, #32]
 80015cc:	e036      	b.n	800163c <HAL_RCC_OscConfig+0x39c>
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	40021000 	.word	0x40021000
 80015d4:	fffeffff 	.word	0xfffeffff
 80015d8:	fffbffff 	.word	0xfffbffff
 80015dc:	40007000 	.word	0x40007000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_OscConfig+0x362>
 80015e8:	4bc9      	ldr	r3, [pc, #804]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80015ea:	4ac9      	ldr	r2, [pc, #804]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80015ec:	6a12      	ldr	r2, [r2, #32]
 80015ee:	2101      	movs	r1, #1
 80015f0:	438a      	bics	r2, r1
 80015f2:	621a      	str	r2, [r3, #32]
 80015f4:	4bc6      	ldr	r3, [pc, #792]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80015f6:	4ac6      	ldr	r2, [pc, #792]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80015f8:	6a12      	ldr	r2, [r2, #32]
 80015fa:	2104      	movs	r1, #4
 80015fc:	438a      	bics	r2, r1
 80015fe:	621a      	str	r2, [r3, #32]
 8001600:	e01c      	b.n	800163c <HAL_RCC_OscConfig+0x39c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x384>
 800160a:	4bc1      	ldr	r3, [pc, #772]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800160c:	4ac0      	ldr	r2, [pc, #768]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800160e:	6a12      	ldr	r2, [r2, #32]
 8001610:	2104      	movs	r1, #4
 8001612:	430a      	orrs	r2, r1
 8001614:	621a      	str	r2, [r3, #32]
 8001616:	4bbe      	ldr	r3, [pc, #760]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001618:	4abd      	ldr	r2, [pc, #756]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800161a:	6a12      	ldr	r2, [r2, #32]
 800161c:	2101      	movs	r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	621a      	str	r2, [r3, #32]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x39c>
 8001624:	4bba      	ldr	r3, [pc, #744]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001626:	4aba      	ldr	r2, [pc, #744]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001628:	6a12      	ldr	r2, [r2, #32]
 800162a:	2101      	movs	r1, #1
 800162c:	438a      	bics	r2, r1
 800162e:	621a      	str	r2, [r3, #32]
 8001630:	4bb7      	ldr	r3, [pc, #732]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001632:	4ab7      	ldr	r2, [pc, #732]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001634:	6a12      	ldr	r2, [r2, #32]
 8001636:	2104      	movs	r1, #4
 8001638:	438a      	bics	r2, r1
 800163a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d014      	beq.n	800166e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7fe fe36 	bl	80002b4 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164c:	e009      	b.n	8001662 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7fe fe31 	bl	80002b4 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	4aae      	ldr	r2, [pc, #696]	; (8001914 <HAL_RCC_OscConfig+0x674>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e175      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	4bab      	ldr	r3, [pc, #684]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x3ae>
 800166c:	e013      	b.n	8001696 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7fe fe21 	bl	80002b4 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	e009      	b.n	800168c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7fe fe1c 	bl	80002b4 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4aa4      	ldr	r2, [pc, #656]	; (8001914 <HAL_RCC_OscConfig+0x674>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e160      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	4ba0      	ldr	r3, [pc, #640]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001696:	2317      	movs	r3, #23
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4b9b      	ldr	r3, [pc, #620]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80016a2:	4a9b      	ldr	r2, [pc, #620]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80016a4:	69d2      	ldr	r2, [r2, #28]
 80016a6:	499c      	ldr	r1, [pc, #624]	; (8001918 <HAL_RCC_OscConfig+0x678>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2210      	movs	r2, #16
 80016b2:	4013      	ands	r3, r2
 80016b4:	d063      	beq.n	800177e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d12a      	bne.n	8001714 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016be:	4b94      	ldr	r3, [pc, #592]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80016c0:	4a93      	ldr	r2, [pc, #588]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80016c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016c4:	2104      	movs	r1, #4
 80016c6:	430a      	orrs	r2, r1
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016ca:	4b91      	ldr	r3, [pc, #580]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80016cc:	4a90      	ldr	r2, [pc, #576]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80016ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016d0:	2101      	movs	r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7fe fded 	bl	80002b4 <HAL_GetTick>
 80016da:	0003      	movs	r3, r0
 80016dc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016e0:	f7fe fde8 	bl	80002b4 <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e12d      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016f2:	4b87      	ldr	r3, [pc, #540]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	2202      	movs	r2, #2
 80016f8:	4013      	ands	r3, r2
 80016fa:	d0f1      	beq.n	80016e0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016fc:	4a84      	ldr	r2, [pc, #528]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80016fe:	4b84      	ldr	r3, [pc, #528]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001702:	21f8      	movs	r1, #248	; 0xf8
 8001704:	438b      	bics	r3, r1
 8001706:	0019      	movs	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	430b      	orrs	r3, r1
 8001710:	6353      	str	r3, [r2, #52]	; 0x34
 8001712:	e034      	b.n	800177e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	3305      	adds	r3, #5
 800171a:	d111      	bne.n	8001740 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800171c:	4b7c      	ldr	r3, [pc, #496]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800171e:	4a7c      	ldr	r2, [pc, #496]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001720:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001722:	2104      	movs	r1, #4
 8001724:	438a      	bics	r2, r1
 8001726:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001728:	4a79      	ldr	r2, [pc, #484]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800172a:	4b79      	ldr	r3, [pc, #484]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	21f8      	movs	r1, #248	; 0xf8
 8001730:	438b      	bics	r3, r1
 8001732:	0019      	movs	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	430b      	orrs	r3, r1
 800173c:	6353      	str	r3, [r2, #52]	; 0x34
 800173e:	e01e      	b.n	800177e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001740:	4b73      	ldr	r3, [pc, #460]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001742:	4a73      	ldr	r2, [pc, #460]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001744:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001746:	2104      	movs	r1, #4
 8001748:	430a      	orrs	r2, r1
 800174a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800174c:	4b70      	ldr	r3, [pc, #448]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800174e:	4a70      	ldr	r2, [pc, #448]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001750:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001752:	2101      	movs	r1, #1
 8001754:	438a      	bics	r2, r1
 8001756:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7fe fdac 	bl	80002b4 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001762:	f7fe fda7 	bl	80002b4 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0ec      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001774:	4b66      	ldr	r3, [pc, #408]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d1f1      	bne.n	8001762 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2220      	movs	r2, #32
 8001784:	4013      	ands	r3, r2
 8001786:	d05c      	beq.n	8001842 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001788:	4b61      	ldr	r3, [pc, #388]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	220c      	movs	r2, #12
 800178e:	4013      	ands	r3, r2
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d00e      	beq.n	80017b2 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001794:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	220c      	movs	r2, #12
 800179a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800179c:	2b08      	cmp	r3, #8
 800179e:	d114      	bne.n	80017ca <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017a0:	4b5b      	ldr	r3, [pc, #364]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	23c0      	movs	r3, #192	; 0xc0
 80017a6:	025b      	lsls	r3, r3, #9
 80017a8:	401a      	ands	r2, r3
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d10b      	bne.n	80017ca <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017b2:	4b57      	ldr	r3, [pc, #348]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	4013      	ands	r3, r2
 80017bc:	d040      	beq.n	8001840 <HAL_RCC_OscConfig+0x5a0>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d03c      	beq.n	8001840 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0c1      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d01b      	beq.n	800180a <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017d2:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80017d4:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80017d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0249      	lsls	r1, r1, #9
 80017dc:	430a      	orrs	r2, r1
 80017de:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7fe fd68 	bl	80002b4 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ea:	f7fe fd63 	bl	80002b4 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0a8      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017fc:	4b44      	ldr	r3, [pc, #272]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80017fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	025b      	lsls	r3, r3, #9
 8001804:	4013      	ands	r3, r2
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x54a>
 8001808:	e01b      	b.n	8001842 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800180c:	4a40      	ldr	r2, [pc, #256]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800180e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001810:	4942      	ldr	r1, [pc, #264]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001812:	400a      	ands	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7fe fd4d 	bl	80002b4 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001820:	f7fe fd48 	bl	80002b4 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e08d      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	4013      	ands	r3, r2
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x580>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001840:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	d100      	bne.n	800184c <HAL_RCC_OscConfig+0x5ac>
 800184a:	e07f      	b.n	800194c <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184c:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	220c      	movs	r2, #12
 8001852:	4013      	ands	r3, r2
 8001854:	2b08      	cmp	r3, #8
 8001856:	d100      	bne.n	800185a <HAL_RCC_OscConfig+0x5ba>
 8001858:	e076      	b.n	8001948 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	2b02      	cmp	r3, #2
 8001860:	d14b      	bne.n	80018fa <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001864:	4a2a      	ldr	r2, [pc, #168]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	492d      	ldr	r1, [pc, #180]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7fe fd21 	bl	80002b4 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7fe fd1c 	bl	80002b4 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e061      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	049b      	lsls	r3, r3, #18
 8001892:	4013      	ands	r3, r2
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001896:	4a1e      	ldr	r2, [pc, #120]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	210f      	movs	r1, #15
 800189e:	438b      	bics	r3, r1
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	430b      	orrs	r3, r1
 80018a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80018aa:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	491c      	ldr	r1, [pc, #112]	; (8001924 <HAL_RCC_OscConfig+0x684>)
 80018b2:	4019      	ands	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	4303      	orrs	r3, r0
 80018be:	430b      	orrs	r3, r1
 80018c0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80018c4:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0449      	lsls	r1, r1, #17
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7fe fcf0 	bl	80002b4 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018da:	f7fe fceb 	bl	80002b4 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e030      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	049b      	lsls	r3, r3, #18
 80018f4:	4013      	ands	r3, r2
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x63a>
 80018f8:	e028      	b.n	800194c <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_RCC_OscConfig+0x670>)
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001902:	400a      	ands	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7fe fcd5 	bl	80002b4 <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x69a>
 8001910:	40021000 	.word	0x40021000
 8001914:	00001388 	.word	0x00001388
 8001918:	efffffff 	.word	0xefffffff
 800191c:	fffeffff 	.word	0xfffeffff
 8001920:	feffffff 	.word	0xfeffffff
 8001924:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7fe fcc4 	bl	80002b4 <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e009      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <HAL_RCC_OscConfig+0x6b8>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	049b      	lsls	r3, r3, #18
 8001942:	4013      	ands	r3, r2
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x688>
 8001946:	e001      	b.n	800194c <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b006      	add	sp, #24
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800196a:	4b7a      	ldr	r3, [pc, #488]	; (8001b54 <HAL_RCC_ClockConfig+0x1f8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2201      	movs	r2, #1
 8001970:	401a      	ands	r2, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d211      	bcs.n	800199c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001978:	4b76      	ldr	r3, [pc, #472]	; (8001b54 <HAL_RCC_ClockConfig+0x1f8>)
 800197a:	4a76      	ldr	r2, [pc, #472]	; (8001b54 <HAL_RCC_ClockConfig+0x1f8>)
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	2101      	movs	r1, #1
 8001980:	438a      	bics	r2, r1
 8001982:	0011      	movs	r1, r2
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800198a:	4b72      	ldr	r3, [pc, #456]	; (8001b54 <HAL_RCC_ClockConfig+0x1f8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2201      	movs	r2, #1
 8001990:	401a      	ands	r2, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0d7      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2202      	movs	r2, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d009      	beq.n	80019ba <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a6:	4a6c      	ldr	r2, [pc, #432]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 80019a8:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	21f0      	movs	r1, #240	; 0xf0
 80019ae:	438b      	bics	r3, r1
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	430b      	orrs	r3, r1
 80019b8:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2201      	movs	r2, #1
 80019c0:	4013      	ands	r3, r2
 80019c2:	d100      	bne.n	80019c6 <HAL_RCC_ClockConfig+0x6a>
 80019c4:	e089      	b.n	8001ada <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b62      	ldr	r3, [pc, #392]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	029b      	lsls	r3, r3, #10
 80019d6:	4013      	ands	r3, r2
 80019d8:	d120      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0b6      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	049b      	lsls	r3, r3, #18
 80019ee:	4013      	ands	r3, r2
 80019f0:	d114      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0aa      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	025b      	lsls	r3, r3, #9
 8001a06:	4013      	ands	r3, r2
 8001a08:	d108      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e09e      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e097      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2103      	movs	r1, #3
 8001a24:	438b      	bics	r3, r1
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a30:	f7fe fc40 	bl	80002b4 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d111      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a40:	e009      	b.n	8001a56 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a42:	f7fe fc37 	bl	80002b4 <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	4a43      	ldr	r2, [pc, #268]	; (8001b5c <HAL_RCC_ClockConfig+0x200>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e07a      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d1ef      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xe6>
 8001a62:	e03a      	b.n	8001ada <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d111      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	e009      	b.n	8001a82 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6e:	f7fe fc21 	bl	80002b4 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <HAL_RCC_ClockConfig+0x200>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e064      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a82:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	220c      	movs	r2, #12
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d1ef      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x112>
 8001a8e:	e024      	b.n	8001ada <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d11b      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001a98:	e009      	b.n	8001aae <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9a:	f7fe fc0b 	bl	80002b4 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	4a2d      	ldr	r2, [pc, #180]	; (8001b5c <HAL_RCC_ClockConfig+0x200>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e04e      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d1ef      	bne.n	8001a9a <HAL_RCC_ClockConfig+0x13e>
 8001aba:	e00e      	b.n	8001ada <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f7fe fbfa 	bl	80002b4 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x200>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e03d      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_ClockConfig+0x1f8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d911      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_RCC_ClockConfig+0x1f8>)
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	2101      	movs	r1, #1
 8001af0:	438a      	bics	r2, r1
 8001af2:	0011      	movs	r1, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_RCC_ClockConfig+0x1f8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	401a      	ands	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e01f      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2204      	movs	r2, #4
 8001b12:	4013      	ands	r3, r2
 8001b14:	d008      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4910      	ldr	r1, [pc, #64]	; (8001b60 <HAL_RCC_ClockConfig+0x204>)
 8001b1e:	4019      	ands	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b28:	f000 f820 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	220f      	movs	r2, #15
 8001b36:	4013      	ands	r3, r2
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x208>)
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	40da      	lsrs	r2, r3
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x20c>)
 8001b42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f7fe fb8c 	bl	8000262 <HAL_InitTick>
  
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b004      	add	sp, #16
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	00001388 	.word	0x00001388
 8001b60:	fffff8ff 	.word	0xfffff8ff
 8001b64:	08002ac8 	.word	0x08002ac8
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b08f      	sub	sp, #60	; 0x3c
 8001b70:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b72:	2314      	movs	r3, #20
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	4a37      	ldr	r2, [pc, #220]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001b78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b7a:	c313      	stmia	r3!, {r0, r1, r4}
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4a35      	ldr	r2, [pc, #212]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xec>)
 8001b84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b86:	c313      	stmia	r3!, {r0, r1, r4}
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	601a      	str	r2, [r3, #0]
                                           9U, 10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	220c      	movs	r2, #12
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d006      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x52>
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	d043      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0xd0>
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d144      	bne.n	8001c42 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bbc:	e044      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc0:	0c9b      	lsrs	r3, r3, #18
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2214      	movs	r2, #20
 8001bc8:	18ba      	adds	r2, r7, r2
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	1d3a      	adds	r2, r7, #4
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bde:	23c0      	movs	r3, #192	; 0xc0
 8001be0:	025b      	lsls	r3, r3, #9
 8001be2:	401a      	ands	r2, r3
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d109      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bee:	481c      	ldr	r0, [pc, #112]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bf0:	f7fe fa92 	bl	8000118 <__udivsi3>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	4353      	muls	r3, r2
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfe:	e01a      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c02:	23c0      	movs	r3, #192	; 0xc0
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	401a      	ands	r2, r3
 8001c08:	23c0      	movs	r3, #192	; 0xc0
 8001c0a:	025b      	lsls	r3, r3, #9
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d109      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c12:	4814      	ldr	r0, [pc, #80]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c14:	f7fe fa80 	bl	8000118 <__udivsi3>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	4353      	muls	r3, r2
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c26:	480e      	ldr	r0, [pc, #56]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c28:	f7fe fa76 	bl	8000118 <__udivsi3>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	001a      	movs	r2, r3
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	4353      	muls	r3, r2
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c3a:	e005      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c40:	e002      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c46:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b00f      	add	sp, #60	; 0x3c
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	08002a44 	.word	0x08002a44
 8001c58:	08002a54 	.word	0x08002a54
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	007a1200 	.word	0x007a1200
 8001c64:	02dc6c00 	.word	0x02dc6c00

08001c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c80:	f7ff fff2 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001c84:	0001      	movs	r1, r0
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	4013      	ands	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	40d9      	lsrs	r1, r3
 8001c96:	000b      	movs	r3, r1
}    
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08002ad8 	.word	0x08002ad8

08001ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e047      	b.n	8001d4a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2269      	movs	r2, #105	; 0x69
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d107      	bne.n	8001cd6 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2268      	movs	r2, #104	; 0x68
 8001cca:	2100      	movs	r1, #0
 8001ccc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f000 f841 	bl	8001d58 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2269      	movs	r2, #105	; 0x69
 8001cda:	2124      	movs	r1, #36	; 0x24
 8001cdc:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	438a      	bics	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 f8dd 	bl	8001eb0 <UART_SetConfig>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e024      	b.n	8001d4a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 fa8c 	bl	8002228 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	6852      	ldr	r2, [r2, #4]
 8001d1a:	490e      	ldr	r1, [pc, #56]	; (8001d54 <HAL_UART_Init+0xac>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	6892      	ldr	r2, [r2, #8]
 8001d2a:	212a      	movs	r1, #42	; 0x2a
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 fb1c 	bl	8002380 <UART_CheckIdleState>
 8001d48:	0003      	movs	r3, r0
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	ffffb7ff 	.word	0xffffb7ff

08001d58 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8001d60:	46c0      	nop			; (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	1dbb      	adds	r3, r7, #6
 8001d76:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2269      	movs	r2, #105	; 0x69
 8001d80:	5c9b      	ldrb	r3, [r3, r2]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d000      	beq.n	8001d8a <HAL_UART_Transmit+0x22>
 8001d88:	e08c      	b.n	8001ea4 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_UART_Transmit+0x30>
 8001d90:	1dbb      	adds	r3, r7, #6
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e084      	b.n	8001ea6 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	015b      	lsls	r3, r3, #5
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d109      	bne.n	8001dbc <HAL_UART_Transmit+0x54>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d105      	bne.n	8001dbc <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d001      	beq.n	8001dbc <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e074      	b.n	8001ea6 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2268      	movs	r2, #104	; 0x68
 8001dc0:	5c9b      	ldrb	r3, [r3, r2]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_UART_Transmit+0x62>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e06d      	b.n	8001ea6 <HAL_UART_Transmit+0x13e>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2268      	movs	r2, #104	; 0x68
 8001dce:	2101      	movs	r1, #1
 8001dd0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2269      	movs	r2, #105	; 0x69
 8001ddc:	2121      	movs	r1, #33	; 0x21
 8001dde:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001de0:	f7fe fa68 	bl	80002b4 <HAL_GetTick>
 8001de4:	0003      	movs	r3, r0
 8001de6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1dba      	adds	r2, r7, #6
 8001dec:	2150      	movs	r1, #80	; 0x50
 8001dee:	8812      	ldrh	r2, [r2, #0]
 8001df0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1dba      	adds	r2, r7, #6
 8001df6:	2152      	movs	r1, #82	; 0x52
 8001df8:	8812      	ldrh	r2, [r2, #0]
 8001dfa:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001dfc:	e035      	b.n	8001e6a <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2252      	movs	r2, #82	; 0x52
 8001e02:	5a9b      	ldrh	r3, [r3, r2]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2252      	movs	r2, #82	; 0x52
 8001e0e:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	0013      	movs	r3, r2
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	f000 fb07 	bl	8002430 <UART_WaitOnFlagUntilTimeout>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e03d      	b.n	8001ea6 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	015b      	lsls	r3, r3, #5
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d111      	bne.n	8001e5a <HAL_UART_Transmit+0xf2>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	8812      	ldrh	r2, [r2, #0]
 8001e4a:	05d2      	lsls	r2, r2, #23
 8001e4c:	0dd2      	lsrs	r2, r2, #23
 8001e4e:	b292      	uxth	r2, r2
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3302      	adds	r3, #2
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	e007      	b.n	8001e6a <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1c59      	adds	r1, r3, #1
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2252      	movs	r2, #82	; 0x52
 8001e6e:	5a9b      	ldrh	r3, [r3, r2]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1c3      	bne.n	8001dfe <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	0013      	movs	r3, r2
 8001e80:	2200      	movs	r2, #0
 8001e82:	2140      	movs	r1, #64	; 0x40
 8001e84:	f000 fad4 	bl	8002430 <UART_WaitOnFlagUntilTimeout>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e00a      	b.n	8001ea6 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2269      	movs	r2, #105	; 0x69
 8001e94:	2120      	movs	r1, #32
 8001e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2268      	movs	r2, #104	; 0x68
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e000      	b.n	8001ea6 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
  }
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b006      	add	sp, #24
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001ebc:	2317      	movs	r3, #23
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001ec4:	230a      	movs	r3, #10
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2200      	movs	r2, #0
 8001eca:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001ecc:	2314      	movs	r3, #20
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ed4:	2313      	movs	r3, #19
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	49c0      	ldr	r1, [pc, #768]	; (8002200 <UART_SetConfig+0x350>)
 8001f00:	4011      	ands	r1, r2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	6852      	ldr	r2, [r2, #4]
 8001f12:	49bc      	ldr	r1, [pc, #752]	; (8002204 <UART_SetConfig+0x354>)
 8001f14:	4011      	ands	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68d2      	ldr	r2, [r2, #12]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	6892      	ldr	r2, [r2, #8]
 8001f34:	49b4      	ldr	r1, [pc, #720]	; (8002208 <UART_SetConfig+0x358>)
 8001f36:	4011      	ands	r1, r2
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4ab2      	ldr	r2, [pc, #712]	; (800220c <UART_SetConfig+0x35c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d125      	bne.n	8001f94 <UART_SetConfig+0xe4>
 8001f48:	4bb1      	ldr	r3, [pc, #708]	; (8002210 <UART_SetConfig+0x360>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d00f      	beq.n	8001f74 <UART_SetConfig+0xc4>
 8001f54:	d304      	bcc.n	8001f60 <UART_SetConfig+0xb0>
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d011      	beq.n	8001f7e <UART_SetConfig+0xce>
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d005      	beq.n	8001f6a <UART_SetConfig+0xba>
 8001f5e:	e013      	b.n	8001f88 <UART_SetConfig+0xd8>
 8001f60:	2317      	movs	r3, #23
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e064      	b.n	8002034 <UART_SetConfig+0x184>
 8001f6a:	2317      	movs	r3, #23
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2202      	movs	r2, #2
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e05f      	b.n	8002034 <UART_SetConfig+0x184>
 8001f74:	2317      	movs	r3, #23
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2204      	movs	r2, #4
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e05a      	b.n	8002034 <UART_SetConfig+0x184>
 8001f7e:	2317      	movs	r3, #23
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2208      	movs	r2, #8
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e055      	b.n	8002034 <UART_SetConfig+0x184>
 8001f88:	2317      	movs	r3, #23
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	e04f      	b.n	8002034 <UART_SetConfig+0x184>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a9e      	ldr	r2, [pc, #632]	; (8002214 <UART_SetConfig+0x364>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d132      	bne.n	8002004 <UART_SetConfig+0x154>
 8001f9e:	4b9c      	ldr	r3, [pc, #624]	; (8002210 <UART_SetConfig+0x360>)
 8001fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	029b      	lsls	r3, r3, #10
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	0252      	lsls	r2, r2, #9
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d019      	beq.n	8001fe4 <UART_SetConfig+0x134>
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	0252      	lsls	r2, r2, #9
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d802      	bhi.n	8001fbe <UART_SetConfig+0x10e>
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <UART_SetConfig+0x120>
 8001fbc:	e01c      	b.n	8001ff8 <UART_SetConfig+0x148>
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	0292      	lsls	r2, r2, #10
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <UART_SetConfig+0x13e>
 8001fc6:	22c0      	movs	r2, #192	; 0xc0
 8001fc8:	0292      	lsls	r2, r2, #10
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d005      	beq.n	8001fda <UART_SetConfig+0x12a>
 8001fce:	e013      	b.n	8001ff8 <UART_SetConfig+0x148>
 8001fd0:	2317      	movs	r3, #23
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e02c      	b.n	8002034 <UART_SetConfig+0x184>
 8001fda:	2317      	movs	r3, #23
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2202      	movs	r2, #2
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e027      	b.n	8002034 <UART_SetConfig+0x184>
 8001fe4:	2317      	movs	r3, #23
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2204      	movs	r2, #4
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	e022      	b.n	8002034 <UART_SetConfig+0x184>
 8001fee:	2317      	movs	r3, #23
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e01d      	b.n	8002034 <UART_SetConfig+0x184>
 8001ff8:	2317      	movs	r3, #23
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	e017      	b.n	8002034 <UART_SetConfig+0x184>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a83      	ldr	r2, [pc, #524]	; (8002218 <UART_SetConfig+0x368>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d104      	bne.n	8002018 <UART_SetConfig+0x168>
 800200e:	2317      	movs	r3, #23
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	e00d      	b.n	8002034 <UART_SetConfig+0x184>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7f      	ldr	r2, [pc, #508]	; (800221c <UART_SetConfig+0x36c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d104      	bne.n	800202c <UART_SetConfig+0x17c>
 8002022:	2317      	movs	r3, #23
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	e003      	b.n	8002034 <UART_SetConfig+0x184>
 800202c:	2317      	movs	r3, #23
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	2210      	movs	r2, #16
 8002032:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	429a      	cmp	r2, r3
 800203e:	d000      	beq.n	8002042 <UART_SetConfig+0x192>
 8002040:	e07b      	b.n	800213a <UART_SetConfig+0x28a>
  {
    switch (clocksource)
 8002042:	2317      	movs	r3, #23
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d01c      	beq.n	8002086 <UART_SetConfig+0x1d6>
 800204c:	dc02      	bgt.n	8002054 <UART_SetConfig+0x1a4>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <UART_SetConfig+0x1ae>
 8002052:	e04f      	b.n	80020f4 <UART_SetConfig+0x244>
 8002054:	2b04      	cmp	r3, #4
 8002056:	d027      	beq.n	80020a8 <UART_SetConfig+0x1f8>
 8002058:	2b08      	cmp	r3, #8
 800205a:	d039      	beq.n	80020d0 <UART_SetConfig+0x220>
 800205c:	e04a      	b.n	80020f4 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800205e:	f7ff fe0d 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002062:	0003      	movs	r3, r0
 8002064:	005a      	lsls	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	18d2      	adds	r2, r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0019      	movs	r1, r3
 8002074:	0010      	movs	r0, r2
 8002076:	f7fe f84f 	bl	8000118 <__udivsi3>
 800207a:	0003      	movs	r3, r0
 800207c:	001a      	movs	r2, r3
 800207e:	2314      	movs	r3, #20
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	801a      	strh	r2, [r3, #0]
        break;
 8002084:	e03b      	b.n	80020fe <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	085b      	lsrs	r3, r3, #1
 800208c:	4a64      	ldr	r2, [pc, #400]	; (8002220 <UART_SetConfig+0x370>)
 800208e:	189a      	adds	r2, r3, r2
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	0019      	movs	r1, r3
 8002096:	0010      	movs	r0, r2
 8002098:	f7fe f83e 	bl	8000118 <__udivsi3>
 800209c:	0003      	movs	r3, r0
 800209e:	001a      	movs	r2, r3
 80020a0:	2314      	movs	r3, #20
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	801a      	strh	r2, [r3, #0]
        break;
 80020a6:	e02a      	b.n	80020fe <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80020a8:	f7ff fd60 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 80020ac:	0003      	movs	r3, r0
 80020ae:	005a      	lsls	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	085b      	lsrs	r3, r3, #1
 80020b6:	18d2      	adds	r2, r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	0019      	movs	r1, r3
 80020be:	0010      	movs	r0, r2
 80020c0:	f7fe f82a 	bl	8000118 <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	001a      	movs	r2, r3
 80020c8:	2314      	movs	r3, #20
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	801a      	strh	r2, [r3, #0]
        break;
 80020ce:	e016      	b.n	80020fe <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	0252      	lsls	r2, r2, #9
 80020da:	189a      	adds	r2, r3, r2
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	0019      	movs	r1, r3
 80020e2:	0010      	movs	r0, r2
 80020e4:	f7fe f818 	bl	8000118 <__udivsi3>
 80020e8:	0003      	movs	r3, r0
 80020ea:	001a      	movs	r2, r3
 80020ec:	2314      	movs	r3, #20
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	801a      	strh	r2, [r3, #0]
        break;
 80020f2:	e004      	b.n	80020fe <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80020f4:	2313      	movs	r3, #19
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
        break;
 80020fc:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80020fe:	230a      	movs	r3, #10
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	2214      	movs	r2, #20
 8002104:	18ba      	adds	r2, r7, r2
 8002106:	8812      	ldrh	r2, [r2, #0]
 8002108:	210f      	movs	r1, #15
 800210a:	438a      	bics	r2, r1
 800210c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800210e:	2314      	movs	r3, #20
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	105b      	asrs	r3, r3, #1
 8002116:	b29b      	uxth	r3, r3
 8002118:	2207      	movs	r2, #7
 800211a:	4013      	ands	r3, r2
 800211c:	b299      	uxth	r1, r3
 800211e:	230a      	movs	r3, #10
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	220a      	movs	r2, #10
 8002124:	18ba      	adds	r2, r7, r2
 8002126:	8812      	ldrh	r2, [r2, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	220a      	movs	r2, #10
 8002132:	18ba      	adds	r2, r7, r2
 8002134:	8812      	ldrh	r2, [r2, #0]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	e05b      	b.n	80021f2 <UART_SetConfig+0x342>
  }
  else
  {
    switch (clocksource)
 800213a:	2317      	movs	r3, #23
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d01b      	beq.n	800217c <UART_SetConfig+0x2cc>
 8002144:	dc02      	bgt.n	800214c <UART_SetConfig+0x29c>
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <UART_SetConfig+0x2a6>
 800214a:	e04d      	b.n	80021e8 <UART_SetConfig+0x338>
 800214c:	2b04      	cmp	r3, #4
 800214e:	d026      	beq.n	800219e <UART_SetConfig+0x2ee>
 8002150:	2b08      	cmp	r3, #8
 8002152:	d037      	beq.n	80021c4 <UART_SetConfig+0x314>
 8002154:	e048      	b.n	80021e8 <UART_SetConfig+0x338>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681c      	ldr	r4, [r3, #0]
 800215a:	f7ff fd8f 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 800215e:	0002      	movs	r2, r0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	18d2      	adds	r2, r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	0019      	movs	r1, r3
 800216e:	0010      	movs	r0, r2
 8002170:	f7fd ffd2 	bl	8000118 <__udivsi3>
 8002174:	0003      	movs	r3, r0
 8002176:	b29b      	uxth	r3, r3
 8002178:	60e3      	str	r3, [r4, #12]
        break;
 800217a:	e03a      	b.n	80021f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681c      	ldr	r4, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <UART_SetConfig+0x374>)
 8002188:	189a      	adds	r2, r3, r2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0019      	movs	r1, r3
 8002190:	0010      	movs	r0, r2
 8002192:	f7fd ffc1 	bl	8000118 <__udivsi3>
 8002196:	0003      	movs	r3, r0
 8002198:	b29b      	uxth	r3, r3
 800219a:	60e3      	str	r3, [r4, #12]
        break;
 800219c:	e029      	b.n	80021f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681c      	ldr	r4, [r3, #0]
 80021a2:	f7ff fce3 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 80021a6:	0002      	movs	r2, r0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	18d2      	adds	r2, r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	0019      	movs	r1, r3
 80021b6:	0010      	movs	r0, r2
 80021b8:	f7fd ffae 	bl	8000118 <__udivsi3>
 80021bc:	0003      	movs	r3, r0
 80021be:	b29b      	uxth	r3, r3
 80021c0:	60e3      	str	r3, [r4, #12]
        break;
 80021c2:	e016      	b.n	80021f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681c      	ldr	r4, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	085b      	lsrs	r3, r3, #1
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	0212      	lsls	r2, r2, #8
 80021d2:	189a      	adds	r2, r3, r2
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	0019      	movs	r1, r3
 80021da:	0010      	movs	r0, r2
 80021dc:	f7fd ff9c 	bl	8000118 <__udivsi3>
 80021e0:	0003      	movs	r3, r0
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	60e3      	str	r3, [r4, #12]
        break;
 80021e6:	e004      	b.n	80021f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80021e8:	2313      	movs	r3, #19
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
        break;
 80021f0:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80021f2:	2313      	movs	r3, #19
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	781b      	ldrb	r3, [r3, #0]

}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b007      	add	sp, #28
 80021fe:	bd90      	pop	{r4, r7, pc}
 8002200:	efff69f3 	.word	0xefff69f3
 8002204:	ffffcfff 	.word	0xffffcfff
 8002208:	fffff4ff 	.word	0xfffff4ff
 800220c:	40013800 	.word	0x40013800
 8002210:	40021000 	.word	0x40021000
 8002214:	40004400 	.word	0x40004400
 8002218:	40004800 	.word	0x40004800
 800221c:	40004c00 	.word	0x40004c00
 8002220:	00f42400 	.word	0x00f42400
 8002224:	007a1200 	.word	0x007a1200

08002228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d00a      	beq.n	8002250 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	6852      	ldr	r2, [r2, #4]
 8002244:	4945      	ldr	r1, [pc, #276]	; (800235c <UART_AdvFeatureConfig+0x134>)
 8002246:	4011      	ands	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800224c:	430a      	orrs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d00a      	beq.n	8002270 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	6852      	ldr	r2, [r2, #4]
 8002264:	493e      	ldr	r1, [pc, #248]	; (8002360 <UART_AdvFeatureConfig+0x138>)
 8002266:	4011      	ands	r1, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800226c:	430a      	orrs	r2, r1
 800226e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2204      	movs	r2, #4
 8002276:	4013      	ands	r3, r2
 8002278:	d00a      	beq.n	8002290 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	6852      	ldr	r2, [r2, #4]
 8002284:	4937      	ldr	r1, [pc, #220]	; (8002364 <UART_AdvFeatureConfig+0x13c>)
 8002286:	4011      	ands	r1, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2208      	movs	r2, #8
 8002296:	4013      	ands	r3, r2
 8002298:	d00a      	beq.n	80022b0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	6852      	ldr	r2, [r2, #4]
 80022a4:	4930      	ldr	r1, [pc, #192]	; (8002368 <UART_AdvFeatureConfig+0x140>)
 80022a6:	4011      	ands	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2210      	movs	r2, #16
 80022b6:	4013      	ands	r3, r2
 80022b8:	d00a      	beq.n	80022d0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	6892      	ldr	r2, [r2, #8]
 80022c4:	4929      	ldr	r1, [pc, #164]	; (800236c <UART_AdvFeatureConfig+0x144>)
 80022c6:	4011      	ands	r1, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022cc:	430a      	orrs	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2220      	movs	r2, #32
 80022d6:	4013      	ands	r3, r2
 80022d8:	d00a      	beq.n	80022f0 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	6892      	ldr	r2, [r2, #8]
 80022e4:	4922      	ldr	r1, [pc, #136]	; (8002370 <UART_AdvFeatureConfig+0x148>)
 80022e6:	4011      	ands	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2240      	movs	r2, #64	; 0x40
 80022f6:	4013      	ands	r3, r2
 80022f8:	d01b      	beq.n	8002332 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	6852      	ldr	r2, [r2, #4]
 8002304:	491b      	ldr	r1, [pc, #108]	; (8002374 <UART_AdvFeatureConfig+0x14c>)
 8002306:	4011      	ands	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	035b      	lsls	r3, r3, #13
 8002318:	429a      	cmp	r2, r3
 800231a:	d10a      	bne.n	8002332 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	6852      	ldr	r2, [r2, #4]
 8002326:	4914      	ldr	r1, [pc, #80]	; (8002378 <UART_AdvFeatureConfig+0x150>)
 8002328:	4011      	ands	r1, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	4013      	ands	r3, r2
 800233a:	d00a      	beq.n	8002352 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	6852      	ldr	r2, [r2, #4]
 8002346:	490d      	ldr	r1, [pc, #52]	; (800237c <UART_AdvFeatureConfig+0x154>)
 8002348:	4011      	ands	r1, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
  }
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	fffdffff 	.word	0xfffdffff
 8002360:	fffeffff 	.word	0xfffeffff
 8002364:	fffbffff 	.word	0xfffbffff
 8002368:	ffff7fff 	.word	0xffff7fff
 800236c:	ffffefff 	.word	0xffffefff
 8002370:	ffffdfff 	.word	0xffffdfff
 8002374:	ffefffff 	.word	0xffefffff
 8002378:	ff9fffff 	.word	0xff9fffff
 800237c:	fff7ffff 	.word	0xfff7ffff

08002380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af02      	add	r7, sp, #8
 8002386:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002392:	f7fd ff8f 	bl	80002b4 <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a21      	ldr	r2, [pc, #132]	; (8002424 <UART_CheckIdleState+0xa4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <UART_CheckIdleState+0x2e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <UART_CheckIdleState+0xa8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d129      	bne.n	8002402 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2208      	movs	r2, #8
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d10d      	bne.n	80023d8 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	0399      	lsls	r1, r3, #14
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <UART_CheckIdleState+0xac>)
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	0013      	movs	r3, r2
 80023ca:	2200      	movs	r2, #0
 80023cc:	f000 f830 	bl	8002430 <UART_WaitOnFlagUntilTimeout>
 80023d0:	1e03      	subs	r3, r0, #0
 80023d2:	d001      	beq.n	80023d8 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e021      	b.n	800241c <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d10d      	bne.n	8002402 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	03d9      	lsls	r1, r3, #15
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <UART_CheckIdleState+0xac>)
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	0013      	movs	r3, r2
 80023f4:	2200      	movs	r2, #0
 80023f6:	f000 f81b 	bl	8002430 <UART_WaitOnFlagUntilTimeout>
 80023fa:	1e03      	subs	r3, r0, #0
 80023fc:	d001      	beq.n	8002402 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e00c      	b.n	800241c <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2269      	movs	r2, #105	; 0x69
 8002406:	2120      	movs	r1, #32
 8002408:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	226a      	movs	r2, #106	; 0x6a
 800240e:	2120      	movs	r1, #32
 8002410:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2268      	movs	r2, #104	; 0x68
 8002416:	2100      	movs	r1, #0
 8002418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40013800 	.word	0x40013800
 8002428:	40004400 	.word	0x40004400
 800242c:	01ffffff 	.word	0x01ffffff

08002430 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	1dfb      	adds	r3, r7, #7
 800243e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002440:	e02b      	b.n	800249a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	3301      	adds	r3, #1
 8002446:	d028      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <UART_WaitOnFlagUntilTimeout+0x2e>
 800244e:	f7fd ff31 	bl	80002b4 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	1ad2      	subs	r2, r2, r3
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	429a      	cmp	r2, r3
 800245c:	d91d      	bls.n	800249a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	4916      	ldr	r1, [pc, #88]	; (80024c4 <UART_WaitOnFlagUntilTimeout+0x94>)
 800246a:	400a      	ands	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	6892      	ldr	r2, [r2, #8]
 8002478:	2101      	movs	r1, #1
 800247a:	438a      	bics	r2, r1
 800247c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2269      	movs	r2, #105	; 0x69
 8002482:	2120      	movs	r1, #32
 8002484:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	226a      	movs	r2, #106	; 0x6a
 800248a:	2120      	movs	r1, #32
 800248c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2268      	movs	r2, #104	; 0x68
 8002492:	2100      	movs	r1, #0
 8002494:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e00f      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	425a      	negs	r2, r3
 80024aa:	4153      	adcs	r3, r2
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	001a      	movs	r2, r3
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d0c4      	beq.n	8002442 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b004      	add	sp, #16
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	fffffe5f 	.word	0xfffffe5f

080024c8 <write_command>:
	  imprimir("Error");
  }
}

void write_command(char *cmd, uint32_t esp_timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADDRESS ,(uint8_t*)cmd, 4, 1000) != HAL_OK) {
 80024d2:	e00a      	b.n	80024ea <write_command+0x22>
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF) {
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <write_command+0x50>)
 80024d6:	0018      	movs	r0, r3
 80024d8:	f7fe fcc2 	bl	8000e60 <HAL_I2C_GetError>
 80024dc:	0003      	movs	r3, r0
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d003      	beq.n	80024ea <write_command+0x22>
			imprimir("Error");
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <write_command+0x54>)
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 fa65 	bl	80029b4 <imprimir>
	while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADDRESS ,(uint8_t*)cmd, 4, 1000) != HAL_OK) {
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	480a      	ldr	r0, [pc, #40]	; (8002518 <write_command+0x50>)
 80024ee:	23fa      	movs	r3, #250	; 0xfa
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2304      	movs	r3, #4
 80024f6:	2130      	movs	r1, #48	; 0x30
 80024f8:	f7fe fa7e 	bl	80009f8 <HAL_I2C_Master_Transmit>
 80024fc:	1e03      	subs	r3, r0, #0
 80024fe:	d1e9      	bne.n	80024d4 <write_command+0xc>
		}
	}

	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <write_command+0x50>)
 8002504:	0018      	movs	r0, r3
 8002506:	f7fe fc9f 	bl	8000e48 <HAL_I2C_GetState>
 800250a:	0003      	movs	r3, r0
 800250c:	2b20      	cmp	r3, #32
 800250e:	d1f8      	bne.n	8002502 <write_command+0x3a>
	}
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000030 	.word	0x20000030
 800251c:	08002a64 	.word	0x08002a64

08002520 <read_buffer>:

uint8_t RXBUFFERSIZE = 2;
uint8_t aRxBuffer[5];

void read_buffer()
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af02      	add	r7, sp, #8
	while (HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADDRESS, (uint8_t *) aRxBuffer, RXBUFFERSIZE, 1000) != HAL_OK) {
 8002526:	e00a      	b.n	800253e <read_buffer+0x1e>
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF) {
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <read_buffer+0x58>)
 800252a:	0018      	movs	r0, r3
 800252c:	f7fe fc98 	bl	8000e60 <HAL_I2C_GetError>
 8002530:	0003      	movs	r3, r0
 8002532:	2b04      	cmp	r3, #4
 8002534:	d003      	beq.n	800253e <read_buffer+0x1e>
			imprimir("Error");
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <read_buffer+0x5c>)
 8002538:	0018      	movs	r0, r3
 800253a:	f000 fa3b 	bl	80029b4 <imprimir>
	while (HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADDRESS, (uint8_t *) aRxBuffer, RXBUFFERSIZE, 1000) != HAL_OK) {
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <read_buffer+0x60>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b299      	uxth	r1, r3
 8002544:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <read_buffer+0x64>)
 8002546:	480c      	ldr	r0, [pc, #48]	; (8002578 <read_buffer+0x58>)
 8002548:	23fa      	movs	r3, #250	; 0xfa
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	000b      	movs	r3, r1
 8002550:	2130      	movs	r1, #48	; 0x30
 8002552:	f7fe fb65 	bl	8000c20 <HAL_I2C_Master_Receive>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d1e6      	bne.n	8002528 <read_buffer+0x8>
		}
	}
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <read_buffer+0x58>)
 800255e:	0018      	movs	r0, r3
 8002560:	f7fe fc72 	bl	8000e48 <HAL_I2C_GetState>
 8002564:	0003      	movs	r3, r0
 8002566:	2b20      	cmp	r3, #32
 8002568:	d1f8      	bne.n	800255c <read_buffer+0x3c>
	}
	 imprimir(aRxBuffer);
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <read_buffer+0x64>)
 800256c:	0018      	movs	r0, r3
 800256e:	f000 fa21 	bl	80029b4 <imprimir>
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000030 	.word	0x20000030
 800257c:	08002a64 	.word	0x08002a64
 8002580:	20000000 	.word	0x20000000
 8002584:	20000028 	.word	0x20000028

08002588 <I2C_Config>:
#include "main.h"
#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void I2C_Config() {
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__I2C1_CLK_ENABLE();
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <I2C_Config+0x9c>)
 8002590:	4a24      	ldr	r2, [pc, #144]	; (8002624 <I2C_Config+0x9c>)
 8002592:	69d2      	ldr	r2, [r2, #28]
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0389      	lsls	r1, r1, #14
 8002598:	430a      	orrs	r2, r1
 800259a:	61da      	str	r2, [r3, #28]
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <I2C_Config+0x9c>)
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	039b      	lsls	r3, r3, #14
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <I2C_Config+0x9c>)
 80025ac:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <I2C_Config+0x9c>)
 80025ae:	6952      	ldr	r2, [r2, #20]
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	02c9      	lsls	r1, r1, #11
 80025b4:	430a      	orrs	r2, r1
 80025b6:	615a      	str	r2, [r3, #20]
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <I2C_Config+0x9c>)
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	02db      	lsls	r3, r3, #11
 80025c0:	4013      	ands	r3, r2
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]

	/**I2C1 GPIO Configuration
	 PB6     ------> I2C1_SCL
	 PB7     ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 ;
 80025c6:	230c      	movs	r3, #12
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ce:	230c      	movs	r3, #12
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2212      	movs	r2, #18
 80025d4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d6:	230c      	movs	r3, #12
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2201      	movs	r2, #1
 80025dc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80025de:	230c      	movs	r3, #12
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	2203      	movs	r2, #3
 80025e4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80025e6:	230c      	movs	r3, #12
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	2201      	movs	r2, #1
 80025ec:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ee:	230c      	movs	r3, #12
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <I2C_Config+0xa0>)
 80025f4:	0019      	movs	r1, r3
 80025f6:	0010      	movs	r0, r2
 80025f8:	f7fd ffe4 	bl	80005c4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025fc:	230c      	movs	r3, #12
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	2280      	movs	r2, #128	; 0x80
 8002602:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002604:	230c      	movs	r3, #12
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	2212      	movs	r2, #18
 800260a:	605a      	str	r2, [r3, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	230c      	movs	r3, #12
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	4a05      	ldr	r2, [pc, #20]	; (8002628 <I2C_Config+0xa0>)
 8002612:	0019      	movs	r1, r3
 8002614:	0010      	movs	r0, r2
 8002616:	f7fd ffd5 	bl	80005c4 <HAL_GPIO_Init>
}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	b008      	add	sp, #32
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	40021000 	.word	0x40021000
 8002628:	48000400 	.word	0x48000400

0800262c <I2C1_Init>:

/* I2C1 init function */
void I2C1_Init(void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <I2C1_Init+0x54>)
 8002632:	4a14      	ldr	r2, [pc, #80]	; (8002684 <I2C1_Init+0x58>)
 8002634:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing =  I2C_TIMING;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <I2C1_Init+0x54>)
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <I2C1_Init+0x5c>)
 800263a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 =  I2C_ADDRESS;
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <I2C1_Init+0x54>)
 800263e:	2230      	movs	r2, #48	; 0x30
 8002640:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <I2C1_Init+0x54>)
 8002644:	2201      	movs	r2, #1
 8002646:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <I2C1_Init+0x54>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <I2C1_Init+0x54>)
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <I2C1_Init+0x54>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <I2C1_Init+0x54>)
 800265c:	2200      	movs	r2, #0
 800265e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <I2C1_Init+0x54>)
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
	HAL_I2C_Init(&hi2c1);
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <I2C1_Init+0x54>)
 8002668:	0018      	movs	r0, r3
 800266a:	f7fe f927 	bl	80008bc <HAL_I2C_Init>

	/**Configure Analogue filter
	 */
	HAL_I2CEx_AnalogFilter_Config(&hi2c1, I2C_ANALOGFILTER_ENABLED);
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <I2C1_Init+0x54>)
 8002670:	2100      	movs	r1, #0
 8002672:	0018      	movs	r0, r3
 8002674:	f7fe fdc8 	bl	8001208 <HAL_I2CEx_ConfigAnalogFilter>

}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	20000030 	.word	0x20000030
 8002684:	40005400 	.word	0x40005400
 8002688:	2000090e 	.word	0x2000090e

0800268c <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	HAL_Init();
 8002690:	f7fd fdce 	bl	8000230 <HAL_Init>

	/* Configure the system clock to 48 MHz */
	SystemClock_Config();
 8002694:	f000 f846 	bl	8002724 <SystemClock_Config>

	UART_Config();
 8002698:	f000 f91c 	bl	80028d4 <UART_Config>
//	UART1_Init();
	UART2_Init();
 800269c:	f000 f95c 	bl	8002958 <UART2_Init>

	I2C_Config();
 80026a0:	f7ff ff72 	bl	8002588 <I2C_Config>
	I2C1_Init();
 80026a4:	f7ff ffc2 	bl	800262c <I2C1_Init>

	imprimir("Esto se imprime por TeraTerm!\r\n");
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <main+0x80>)
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f982 	bl	80029b4 <imprimir>


	while (1) {
//		send_ATCommand_DMA("AT\r\n");
//		HAL_UART_Receive_DMA(&huart1, (uint8_t *)buff, strlen(buff));
		write_command("AT\r\n", 1000);
 80026b0:	23fa      	movs	r3, #250	; 0xfa
 80026b2:	009a      	lsls	r2, r3, #2
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <main+0x84>)
 80026b6:	0011      	movs	r1, r2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff ff05 	bl	80024c8 <write_command>
		read_buffer();
 80026be:	f7ff ff2f 	bl	8002520 <read_buffer>
		write_command("AT+CMGF=1\r\n", 1000);
 80026c2:	23fa      	movs	r3, #250	; 0xfa
 80026c4:	009a      	lsls	r2, r3, #2
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <main+0x88>)
 80026c8:	0011      	movs	r1, r2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7ff fefc 	bl	80024c8 <write_command>
		read_buffer();
 80026d0:	f7ff ff26 	bl	8002520 <read_buffer>
		write_command("AT+CMGS=+34649103025\r\n", 1000);
 80026d4:	23fa      	movs	r3, #250	; 0xfa
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <main+0x8c>)
 80026da:	0011      	movs	r1, r2
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff fef3 	bl	80024c8 <write_command>
		read_buffer();
 80026e2:	f7ff ff1d 	bl	8002520 <read_buffer>
		write_command("ieeeeeee\r\n", 1000);
 80026e6:	23fa      	movs	r3, #250	; 0xfa
 80026e8:	009a      	lsls	r2, r3, #2
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <main+0x90>)
 80026ec:	0011      	movs	r1, r2
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7ff feea 	bl	80024c8 <write_command>
		read_buffer();
 80026f4:	f7ff ff14 	bl	8002520 <read_buffer>
		write_command("\x1A", 1000);
 80026f8:	23fa      	movs	r3, #250	; 0xfa
 80026fa:	009a      	lsls	r2, r3, #2
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <main+0x94>)
 80026fe:	0011      	movs	r1, r2
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff fee1 	bl	80024c8 <write_command>
		read_buffer();
 8002706:	f7ff ff0b 	bl	8002520 <read_buffer>
		write_command("AT\r\n", 1000);
 800270a:	e7d1      	b.n	80026b0 <main+0x24>
 800270c:	08002a6c 	.word	0x08002a6c
 8002710:	08002a8c 	.word	0x08002a8c
 8002714:	08002a94 	.word	0x08002a94
 8002718:	08002aa0 	.word	0x08002aa0
 800271c:	08002ab8 	.word	0x08002ab8
 8002720:	08002ac4 	.word	0x08002ac4

08002724 <SystemClock_Config>:
 *            PLLMUL                         = 2
 *            Flash Latency(WS)              = 1
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b092      	sub	sp, #72	; 0x48
 8002728:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Select HSI48 Oscillator as PLL source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2220      	movs	r2, #32
 800272e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	2201      	movs	r2, #1
 8002734:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2202      	movs	r2, #2
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	22c0      	movs	r2, #192	; 0xc0
 8002740:	0252      	lsls	r2, r2, #9
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2201      	movs	r2, #1
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2200      	movs	r2, #0
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	0018      	movs	r0, r3
 8002754:	f7fe fda4 	bl	80012a0 <HAL_RCC_OscConfig>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <SystemClock_Config+0x3c>
		Error_Handler();
 800275c:	f000 f81e 	bl	800279c <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK and PCLK1 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8002760:	2338      	movs	r3, #56	; 0x38
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002768:	2338      	movs	r3, #56	; 0x38
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2202      	movs	r2, #2
 800276e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002770:	2338      	movs	r3, #56	; 0x38
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002778:	2338      	movs	r3, #56	; 0x38
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002780:	2338      	movs	r3, #56	; 0x38
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2101      	movs	r1, #1
 8002786:	0018      	movs	r0, r3
 8002788:	f7ff f8e8 	bl	800195c <HAL_RCC_ClockConfig>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d001      	beq.n	8002794 <SystemClock_Config+0x70>
		Error_Handler();
 8002790:	f000 f804 	bl	800279c <Error_Handler>
	}
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	b012      	add	sp, #72	; 0x48
 800279a:	bd80      	pop	{r7, pc}

0800279c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
	/* User may add here some code to deal with this error */
	while (1) {
 80027a0:	e7fe      	b.n	80027a0 <Error_Handler+0x4>
	...

080027a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a4:	480d      	ldr	r0, [pc, #52]	; (80027dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027aa:	e003      	b.n	80027b4 <LoopCopyDataInit>

080027ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80027ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027b2:	3104      	adds	r1, #4

080027b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027b4:	480b      	ldr	r0, [pc, #44]	; (80027e4 <LoopForever+0xa>)
  ldr r3, =_edata
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <LoopForever+0xe>)
  adds r2, r0, r1
 80027b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027bc:	d3f6      	bcc.n	80027ac <CopyDataInit>
  ldr r2, =_sbss
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <LoopForever+0x12>)
  b LoopFillZerobss
 80027c0:	e002      	b.n	80027c8 <LoopFillZerobss>

080027c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  str  r3, [r2]
 80027c4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c6:	3204      	adds	r2, #4

080027c8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <LoopForever+0x16>)
  cmp r2, r3
 80027ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027cc:	d3f9      	bcc.n	80027c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027ce:	f000 f83d 	bl	800284c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80027d2:	f000 f907 	bl	80029e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027d6:	f7ff ff59 	bl	800268c <main>

080027da <LoopForever>:

LoopForever:
    b LoopForever
 80027da:	e7fe      	b.n	80027da <LoopForever>
  ldr   r0, =_estack
 80027dc:	20004000 	.word	0x20004000
  ldr r3, =_sidata
 80027e0:	08002ae8 	.word	0x08002ae8
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027e8:	20000008 	.word	0x20000008
  ldr r2, =_sbss
 80027ec:	20000008 	.word	0x20000008
  ldr r3, = _ebss
 80027f0:	200001e4 	.word	0x200001e4

080027f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC1_COMP_IRQHandler>

080027f6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002804:	e7fe      	b.n	8002804 <HardFault_Handler+0x4>

08002806 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	af00      	add	r7, sp, #0
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800281e:	f7fd fd3d 	bl	800029c <HAL_IncTick>
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <DMA1_Channel2_3_IRQHandler>:
  * @brief  This function handles PPP interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800282e:	0018      	movs	r0, r3
 8002830:	f7fd fe25 	bl	800047e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002836:	0018      	movs	r0, r3
 8002838:	f7fd fe21 	bl	800047e <HAL_DMA_IRQHandler>
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	2000007c 	.word	0x2000007c
 8002848:	200000c0 	.word	0x200000c0

0800284c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <SystemInit+0x70>)
 8002852:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <SystemInit+0x70>)
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	2101      	movs	r1, #1
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <SystemInit+0x70>)
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <SystemInit+0x70>)
 8002860:	6852      	ldr	r2, [r2, #4]
 8002862:	4917      	ldr	r1, [pc, #92]	; (80028c0 <SystemInit+0x74>)
 8002864:	400a      	ands	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <SystemInit+0x70>)
 800286a:	4a14      	ldr	r2, [pc, #80]	; (80028bc <SystemInit+0x70>)
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4915      	ldr	r1, [pc, #84]	; (80028c4 <SystemInit+0x78>)
 8002870:	400a      	ands	r2, r1
 8002872:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <SystemInit+0x70>)
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <SystemInit+0x70>)
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	4913      	ldr	r1, [pc, #76]	; (80028c8 <SystemInit+0x7c>)
 800287c:	400a      	ands	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <SystemInit+0x70>)
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <SystemInit+0x70>)
 8002884:	6852      	ldr	r2, [r2, #4]
 8002886:	4911      	ldr	r1, [pc, #68]	; (80028cc <SystemInit+0x80>)
 8002888:	400a      	ands	r2, r1
 800288a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <SystemInit+0x70>)
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <SystemInit+0x70>)
 8002890:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002892:	210f      	movs	r1, #15
 8002894:	438a      	bics	r2, r1
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <SystemInit+0x70>)
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <SystemInit+0x70>)
 800289c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800289e:	490c      	ldr	r1, [pc, #48]	; (80028d0 <SystemInit+0x84>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <SystemInit+0x70>)
 80028a6:	4a05      	ldr	r2, [pc, #20]	; (80028bc <SystemInit+0x70>)
 80028a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028aa:	2101      	movs	r1, #1
 80028ac:	438a      	bics	r2, r1
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80028b0:	4b02      	ldr	r3, [pc, #8]	; (80028bc <SystemInit+0x70>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]

}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	08ffb80c 	.word	0x08ffb80c
 80028c4:	fef6ffff 	.word	0xfef6ffff
 80028c8:	fffbffff 	.word	0xfffbffff
 80028cc:	ffc0ffff 	.word	0xffc0ffff
 80028d0:	fffcfe2c 	.word	0xfffcfe2c

080028d4 <UART_Config>:
  * @brief  Configuracion de la UART
  * @param  None
  * @retval None
  */
void UART_Config(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIOA_CLK_ENABLE();
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <UART_Config+0x80>)
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <UART_Config+0x80>)
 80028de:	6952      	ldr	r2, [r2, #20]
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	0289      	lsls	r1, r1, #10
 80028e4:	430a      	orrs	r2, r1
 80028e6:	615a      	str	r2, [r3, #20]
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <UART_Config+0x80>)
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	029b      	lsls	r3, r3, #10
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
//    /* DMA interrupt init */
//    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);

    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <UART_Config+0x80>)
 80028f8:	4a16      	ldr	r2, [pc, #88]	; (8002954 <UART_Config+0x80>)
 80028fa:	69d2      	ldr	r2, [r2, #28]
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	0289      	lsls	r1, r1, #10
 8002900:	430a      	orrs	r2, r1
 8002902:	61da      	str	r2, [r3, #28]
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <UART_Config+0x80>)
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	029b      	lsls	r3, r3, #10
 800290c:	4013      	ands	r3, r2
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]

    /**USART2 GPIO Configuration
    PA2     ------> USART6_TX
    PA3     ------> USART6_RX
    */
    GPIO_InitStruct.Pin 	  	= GPIO_PIN_2|GPIO_PIN_3;
 8002912:	230c      	movs	r3, #12
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	220c      	movs	r2, #12
 8002918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode   		= GPIO_MODE_AF_PP; //GPIO_MODE_ANALOG?
 800291a:	230c      	movs	r3, #12
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2202      	movs	r2, #2
 8002920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull   		= GPIO_NOPULL;
 8002922:	230c      	movs	r3, #12
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed 	  	= GPIO_SPEED_HIGH;
 800292a:	230c      	movs	r3, #12
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2203      	movs	r2, #3
 8002930:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate 	= GPIO_AF1_USART2;
 8002932:	230c      	movs	r3, #12
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2201      	movs	r2, #1
 8002938:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	230c      	movs	r3, #12
 800293c:	18fa      	adds	r2, r7, r3
 800293e:	2390      	movs	r3, #144	; 0x90
 8002940:	05db      	lsls	r3, r3, #23
 8002942:	0011      	movs	r1, r2
 8002944:	0018      	movs	r0, r3
 8002946:	f7fd fe3d 	bl	80005c4 <HAL_GPIO_Init>
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b008      	add	sp, #32
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	40021000 	.word	0x40021000

08002958 <UART2_Init>:
/**
 * @brief  Inicializacion de la UART
 * @param  None
 * @retval None
 */
void UART2_Init(void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <UART2_Init+0x54>)
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <UART2_Init+0x58>)
 8002960:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <UART2_Init+0x54>)
 8002964:	22e1      	movs	r2, #225	; 0xe1
 8002966:	0252      	lsls	r2, r2, #9
 8002968:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <UART2_Init+0x54>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <UART2_Init+0x54>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <UART2_Init+0x54>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <UART2_Init+0x54>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <UART2_Init+0x54>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <UART2_Init+0x54>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <UART2_Init+0x54>)
 8002990:	0018      	movs	r0, r3
 8002992:	f7ff f989 	bl	8001ca8 <HAL_UART_Init>

	HAL_NVIC_SetPriority(USART2_IRQn, 0x1, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2101      	movs	r1, #1
 800299a:	201c      	movs	r0, #28
 800299c:	f7fd fd3c 	bl	8000418 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029a0:	201c      	movs	r0, #28
 80029a2:	f7fd fd4f 	bl	8000444 <HAL_NVIC_EnableIRQ>
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000174 	.word	0x20000174
 80029b0:	40004400 	.word	0x40004400

080029b4 <imprimir>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	HAL_NVIC_SetPendingIRQ(USART2_IRQn);
}

void imprimir(char* msg) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 0xFFFF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f7fd fba2 	bl	8000108 <strlen>
 80029c4:	0003      	movs	r3, r0
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <imprimir+0x28>)
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <imprimir+0x2c>)
 80029ce:	f7ff f9cb 	bl	8001d68 <HAL_UART_Transmit>
}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	0000ffff 	.word	0x0000ffff
 80029e0:	20000174 	.word	0x20000174

080029e4 <__libc_init_array>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	2600      	movs	r6, #0
 80029e8:	4d0c      	ldr	r5, [pc, #48]	; (8002a1c <__libc_init_array+0x38>)
 80029ea:	4c0d      	ldr	r4, [pc, #52]	; (8002a20 <__libc_init_array+0x3c>)
 80029ec:	1b64      	subs	r4, r4, r5
 80029ee:	10a4      	asrs	r4, r4, #2
 80029f0:	42a6      	cmp	r6, r4
 80029f2:	d109      	bne.n	8002a08 <__libc_init_array+0x24>
 80029f4:	2600      	movs	r6, #0
 80029f6:	f000 f819 	bl	8002a2c <_init>
 80029fa:	4d0a      	ldr	r5, [pc, #40]	; (8002a24 <__libc_init_array+0x40>)
 80029fc:	4c0a      	ldr	r4, [pc, #40]	; (8002a28 <__libc_init_array+0x44>)
 80029fe:	1b64      	subs	r4, r4, r5
 8002a00:	10a4      	asrs	r4, r4, #2
 8002a02:	42a6      	cmp	r6, r4
 8002a04:	d105      	bne.n	8002a12 <__libc_init_array+0x2e>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	00b3      	lsls	r3, r6, #2
 8002a0a:	58eb      	ldr	r3, [r5, r3]
 8002a0c:	4798      	blx	r3
 8002a0e:	3601      	adds	r6, #1
 8002a10:	e7ee      	b.n	80029f0 <__libc_init_array+0xc>
 8002a12:	00b3      	lsls	r3, r6, #2
 8002a14:	58eb      	ldr	r3, [r5, r3]
 8002a16:	4798      	blx	r3
 8002a18:	3601      	adds	r6, #1
 8002a1a:	e7f2      	b.n	8002a02 <__libc_init_array+0x1e>
 8002a1c:	08002ae0 	.word	0x08002ae0
 8002a20:	08002ae0 	.word	0x08002ae0
 8002a24:	08002ae0 	.word	0x08002ae0
 8002a28:	08002ae4 	.word	0x08002ae4

08002a2c <_init>:
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a32:	bc08      	pop	{r3}
 8002a34:	469e      	mov	lr, r3
 8002a36:	4770      	bx	lr

08002a38 <_fini>:
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3e:	bc08      	pop	{r3}
 8002a40:	469e      	mov	lr, r3
 8002a42:	4770      	bx	lr
